{"classes":{"Actor":{"ClearShader":{"description":"\nThis makes the actor use the default shader\n\n|since_notitg_v3|\n","returns":["void"]},"Draw":{"description":"\nUseful in combination with :lua:meth:`ActorFrame.SetDrawFunction`\n\n|since_notitg_v1|\n","returns":["void"]},"GetBaseZoomX":{"description":"\n|since_itg|\n","returns":["number"]},"GetBaseZoomY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetBaseZoomZ":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetCurrentRotationX":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetCurrentRotationY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetCurrentRotationZ":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetCurrentZoomX":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetCurrentZoomY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetCurrentZoomZ":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetEffectDelta":{"description":"\n|since_itg|\n","returns":["number"]},"GetEffectRotationX":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetEffectRotationY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetEffectRotationZ":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetEffectX":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetEffectY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetEffectZ":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetHeight":{"description":"\nNot tweenable!\n\n|since_itg|\n","returns":["number"]},"GetHidden":{"description":"\n|since_notitg_v3_1|\n","returns":["boolean"]},"GetName":{"description":"\nThe default actor name is an empty string - this does not return nil if a name hasn't been set.\n\n|since_notitg_v1|\n","returns":["string"]},"GetParent":{"description":"\nCan return ``nil`` if there is no parent (such as the case when trying to get the parent of the top screen).\n\n|since_notitg_v4|\n","returns":["ActorFrame","nil"]},"GetRotationOrder":{"description":"\nThe default rotation order is ``zyx``.\n\nExample return values include ``xyz`` or ``zyx`` or ``yzx``.\n\n|since_notitg_v4|\n","returns":["string"]},"GetRotationX":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetRotationY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetRotationZ":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetSecsIntoEffect":{"description":"\n|since_itg|\n","returns":["number"]},"GetShader":{"description":"\n|since_notitg_v3|\n","returns":["RageShaderProgram","nil"]},"GetSkewX":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetSkewY":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetTweenTimeLeft":{"description":"\nReturns ``0`` is no tween is currently running.\n\n|since_notitg_v4|\n","returns":["number"]},"GetWidth":{"description":"\n|since_itg|\n","returns":["number"]},"GetX":{"description":"\n|since_itg|\n","returns":["number"]},"GetXMLDir":{"description":"\nThis can retrun an empty string if an actor was not defined in XML (Eg: by trying to call ``GetXMLDir()`` on ``SCREENMAN:GetTopScreen()``)\n\nEg: ``shader_earth:GetXMLDir()`` (Where ``shader_earth`` is an actor in a mod chart)\n\nReturns ``/Songs/CraftedCart/Camellia_ExitThisEarthsAtomosphere/fg/``\n\n|since_notitg_v3|\n","returns":["string"]},"GetY":{"description":"\n|since_itg|\n","returns":["number"]},"GetZ":{"description":"\n|since_itg|\n","returns":["number"]},"GetZoom":{"description":"\n|since_itg|\n","returns":["number"]},"GetZoomX":{"description":"\n|since_itg|\n","returns":["number"]},"GetZoomY":{"description":"\n|since_itg|\n","returns":["number"]},"GetZoomZ":{"description":"\n|since_itg|\n","returns":["number"]},"SetHeight":{"args":[{"description":"The new height to set, in pixels","name":"width","type":["number"]}],"description":"\nNot tweenable!\n\n|since_itg|\n\n","returns":["void"]},"SetName":{"args":[{"description":"The new name to set","name":"name","type":["string"]}],"description":"\nYou can also set an actor's initial name using the ``Name`` XML attribute.\n\n|since_notitg_v1|\n\n","returns":["void"]},"SetRotationOrder":{"args":[{"description":"A 3 character string dictating the rotation order (Eg: ``xyz`` or ``zyx`` or ``yzx``)","name":"order","type":["string"]}],"description":"\nThe default rotation order is ``zyx``.\n\n|since_notitg_v4|\n\n","returns":["void"]},"SetShader":{"args":[{"description":"The shader program to use","name":"shader","type":["RageShaderProgram"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetTextureFiltering":{"args":[{"description":"Whether texture filtering should be enabled","name":"enable","type":["boolean"]}],"description":"\nDefaults to ``true``\n\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureWrapping":{"args":[{"description":"``1`` to enable, ``0`` to disable","name":"enable","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"SetWidth":{"args":[{"description":"The new width to set, in pixels","name":"width","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"accelerate":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]}],"description":"\nTweenable methods called after this will accelerate as they approace the tween's end (``time_percent ^ 2``)\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"addaux":{"args":[{"description":"How much to add to the aux value","name":"deltaAux","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v4|\n\n","returns":["void"]},"addcommand":{"args":[{"description":"The command name to register, without the ``Command`` suffix","name":"commandName","type":["string"]},{"description":"The function to call when the command is fired","name":"func","type":["function"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"additiveblend":{"args":[{"description":"``1`` to use additive blend, ``0`` to use normal blend","name":"enable","type":["number"]}],"description":"Default value is ``0`` (normal)\n\nAlso see :lua:meth:`Actor.blend`\n\n|since_itg|\n\n","returns":["void"]},"addrotationx":{"args":[{"description":"The value to add, in degrees","name":"rotX","type":["number"]}],"description":"\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"addrotationy":{"args":[{"description":"The value to add, in degrees","name":"rotY","type":["number"]}],"description":"\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"addrotationz":{"args":[{"description":"The value to add, in degrees","name":"rotZ","type":["number"]}],"description":"\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"addx":{"args":[{"description":"How much to translate the actor on the X axis","name":"x","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"addy":{"args":[{"description":"How much to translate the actor on the Y axis","name":"y","type":["number"]}],"description":"\nNote that a greater Y value moves an actor *down*, not up.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"addz":{"args":[{"description":"How much to translate the actor on the Z axis","name":"z","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"align":{"args":[{"description":"The new horizontal alignment to set","name":"hPos","type":["number"]},{"description":"The new vertical alignment to set","name":"vPos","type":["number"]}],"description":"\nThis effectively changes the origin point of the actor\n\nA horizontal alignment of ``0`` will top-align the actor, ``0.5`` will center align, and ``1`` will bottom align.\nA horizontal alignment of ``0`` will left-align the actor, ``0.5`` will center align, and ``1`` will right align.\nYou can also specify values outside of the range of 0 - 1.\n\nNot tweenable!\n\n|since_notitg_v1|\n\n","returns":["void"]},"animate":{"args":[{"description":"Whether the animated texture should play (``1`` to play, ``0`` to pause)","name":"enable","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"aux":{"args":[{"description":"The new aux value to set","name":"value","type":["number"]}],"description":"\nAn aux value is simply a tweenable property on an actor that has no visual effect on its own\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"backfacecull":{"args":[{"description":"``1`` to cull back faces, ``0`` to cull nothing","name":"enable","type":["number"]}],"description":"\nDefault value is ``0`` (cull none)\n\nAlso see :lua:meth:`Actor.backfacecull`\n\n|since_itg|\n\n","returns":["void"]},"basezoomx":{"args":[{"description":"The new base X scale to set","name":"scale","type":["number"]}],"description":"\nNot tweenable!\n\n|since_itg|\n\n","returns":["void"]},"basezoomy":{"args":[{"description":"The new base Y scale to set","name":"scale","type":["number"]}],"description":"\nNot tweenable!\n\n|since_itg|\n\n","returns":["void"]},"basezoomz":{"args":[{"description":"The new base Z scale to set","name":"scale","type":["number"]}],"description":"\nNot tweenable!\n\n|since_notitg_v4|\n\n","returns":["void"]},"blend":{"args":[{"description":"The new blend mode to set (``normal``, ``add``, ``subtract``, ``modulate``, ``copysrc``, ``alphamask``, ``alphaknockout``, ``alphamultiply``, ``weightedmultiply``, ``invertdest``, ``noeffect``)","name":"mode","type":["string"]}],"description":"\nDefault value is ``normal``\n\n|since_itg|\n\n","returns":["void"]},"bob":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"bounce":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"bouncebegin":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]}],"description":"\nTweenable methods called after this will bounce at the beginning before interpolating towards their end point\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"bounceend":{"args":[{"description":"How long the tween should last","name":"duration","type":["number"]}],"description":"\nTweenable methods called after this will interpolate towards their end point before bouncing at the end\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"clearzbuffer":{"args":[{"description":"``1`` to clear, ``0`` to not clear","name":"enable","type":["number"]}],"description":"\nDefault value is ``0`` (don't clear)\n\n|since_itg|\n\n","returns":["void"]},"cmd":{"args":[{"description":"The command string to execute","name":"cmd","type":["string"]}],"description":"\nCommand notation is just shorthand to call methods on ``self``. For example, the command string ``hidden,1;diffuse,1,0,1,1`` is shorthand for ``self:hidden(1)`` and ``self:diffuse(1, 0, 1, 1)``\n\n|since_notitg_v1|\n\n","returns":["void"]},"crop":{"args":[{"description":"The percentage of the actor that should be cropped from the left (0 - 1)","name":"percentLeft","type":["number"]},{"description":"The percentage of the actor that should be cropped from the top (0 - 1)","name":"percentTop","type":["number"]},{"description":"The percentage of the actor that should be cropped from the right (0 - 1)","name":"percentRight","type":["number"]},{"description":"The percentage of the actor that should be cropped from the bottom (0 - 1)","name":"percentBottom","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"cropbottom":{"args":[{"description":"The percentage of the actor that should be cropped (0 - 1)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"croph":{"args":[{"description":"The percentage of the actor that should be cropped from the left (0 - 1)","name":"percentLeft","type":["number"]},{"description":"The percentage of the actor that should be cropped from the right (0 - 1)","name":"percentRight","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"cropleft":{"args":[{"description":"The percentage of the actor that should be cropped (0 - 1)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"cropright":{"args":[{"description":"The percentage of the actor that should be cropped (0 - 1)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"croptop":{"args":[{"description":"The percentage of the actor that should be cropped (0 - 1)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"cropv":{"args":[{"description":"The percentage of the actor that should be cropped from the top (0 - 1)","name":"percentTop","type":["number"]},{"description":"The percentage of the actor that should be cropped from the bottom (0 - 1)","name":"percentBottom","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"cullmode":{"args":[{"description":"The new face culling method to use (``back``, ``front``, or ``none``)","name":"mode","type":["string"]}],"description":"\nDefault value is ``none``\n\n|since_itg|\n\n","returns":["void"]},"decelerate":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]}],"description":"\nTweenable methods called after this will decelerate as they approace the tween's end (``1 - (1 - time_percent) * (1 - time_percent)``)\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"diffuse":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\nDefault value is ``1, 1, 1, 1`` (white)\n\n|since_itg|\n\n","returns":["void"]},"diffusealpha":{"args":[{"description":"The new alpha value to set (0 - 1)","name":"alpha","type":["number"]}],"description":"\nDefault value is ``1`` (fully opaque)\n\n|since_itg|\n\n","returns":["void"]},"diffuseblink":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"diffusebottomedge":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffusecolor":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1) **This is ignored but still needs to be present**","name":"a","type":["number"]}],"description":"\nDefault value is ``1, 1, 1, 1`` (white)\n\n|since_itg|\n\n","returns":["void"]},"diffuseleftedge":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffuselowerleft":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffuselowerright":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffuseramp":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"diffuserightedge":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffuseshift":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"diffusetopedge":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffuseupperleft":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"diffuseupperright":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"draworder":{"args":[{"description":"Where this actor should be in the draw order","name":"order","type":["number"]}],"description":"\nLarger values are displayed first\n\n|since_itg|\n\n","returns":["void"]},"effectclock":{"args":[{"description":"The clock to sync with (Should be ``timer``, ``beat``, ``music``, or ``bgm``)","name":"clock","type":["sync"]}],"description":"\nDefault value is ``timer``\n\n|since_itg|\n","returns":{}},"effectcolor1":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\nUsed with :lua:meth:`Actor.diffuseblink`, :lua:meth:`Actor.diffuseramp`, and :lua:meth:`Actor.diffuseshift`.\n\nDefault value is ``1, 1, 1, 1`` (white)\n\n","returns":["void"]},"effectcolor2":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\nUsed with :lua:meth:`Actor.diffuseblink`, :lua:meth:`Actor.diffuseramp`, and :lua:meth:`Actor.diffuseshift`.\n\nDefault value is ``1, 1, 1, 1`` (white)\n\n","returns":["void"]},"effectdelay":{"args":[{"description":"The delay to apply, in seconds","name":"delay","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"effectmagnitude":{"args":[{"description":"The new X magnitude to set","name":"x","type":["number"]},{"description":"The new Y magnitude to set","name":"y","type":["number"]},{"description":"The new Z magnitude to set","name":"z","type":["number"]}],"description":"\nMagnitudes are set per-axis, hence the X, Y, and Z parameters\n\n","returns":["void"]},"effectoffset":{"args":[{"description":"The offset to apply, in seconds","name":"delay","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"effectperiod":{"args":[{"description":"The new effect period to set","name":"period","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"fade":{"args":[{"description":"The percentage of the actor that should be faded from the left (generally between 0 - 1, but can be larger)","name":"percentLeft","type":["number"]},{"description":"The percentage of the actor that should be faded from the top (generally between 0 - 1, but can be larger)","name":"percentTop","type":["number"]},{"description":"The percentage of the actor that should be faded from the right (generally between 0 - 1, but can be larger)","name":"percentRight","type":["number"]},{"description":"The percentage of the actor that should be faded from the bottom (generally between 0 - 1, but can be larger)","name":"percentBottom","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"fadebottom":{"args":[{"description":"The percentage of the actor that should be faded (generally between 0 - 1, but can be larger)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"fadeh":{"args":[{"description":"The percentage of the actor that should be faded from the left (generally between 0 - 1, but can be larger)","name":"percentLeft","type":["number"]},{"description":"The percentage of the actor that should be faded from the right (generally between 0 - 1, but can be larger)","name":"percentRight","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"fadeleft":{"args":[{"description":"The percentage of the actor that should be faded (generally between 0 - 1, but can be larger)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"faderight":{"args":[{"description":"The percentage of the actor that should be faded (generally between 0 - 1, but can be larger)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"fadetop":{"args":[{"description":"The percentage of the actor that should be faded (generally between 0 - 1, but can be larger)","name":"percent","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"fadev":{"args":[{"description":"The percentage of the actor that should be faded from the top (generally between 0 - 1, but can be larger)","name":"percentTop","type":["number"]},{"description":"The percentage of the actor that should be faded from the bottom (generally between 0 - 1, but can be larger)","name":"percentBottom","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"finishtweening":{"description":"\n|since_itg|\n","returns":["void"]},"floorwag":{"description":"\n|effect|\n\n|since_notitg_v3|\n","returns":["void"]},"getaux":{"description":"\n|since_itg|\n","returns":["number"]},"getcurrentrotation":{"description":"\nThis function returns three values - use it as such:\n\n.. code-block:: lua\n\nlocal x_rot, y_rot, z_rot = actor:getcurrentrotation()\n\n|since_notitg_v4|\n","returns":["multiple"]},"getdiffuse":{"description":"\nThis function returns three values - use it as such:\n\n.. code-block:: lua\n\nlocal r, g, b, a = actor:getdiffuse()\n\n|since_notitg_v3|\n","returns":["multiple"]},"geteffectmagnitude":{"description":"\nThis function returns three values - use it as such:\n\n.. code-block:: lua\n\nlocal x_mag, y_mag, z_mag = actor:geteffectmagnitude()\n\n|since_itg|\n","returns":["multiple"]},"getrotation":{"description":"\nThis function returns three values - use it as such:\n\n.. code-block:: lua\n\nlocal x_rot, y_rot, z_rot = actor:getrotation()\n\n|since_itg|\n","returns":["multiple"]},"glow":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"glowblink":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"glowramp":{"description":"\n|effect|\n\n|since_notitg_v3|\n","returns":["void"]},"glowshift":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"halign":{"args":[{"description":"The new horizontal alignment to set","name":"hPos","type":["number"]}],"description":"\nThis effectively changes the origin point of the actor\n\nA horizontal alignment of ``0`` will left-align the actor, ``0.5`` will center align, and ``1`` will right align.\nYou can also specify values outside of the range of 0 - 1.\n\nNote that this does not work for aligning :lua:class:`BitmapText` actors, use :lua:meth:`Actor.horizalogn` instead.\n\nNot tweenable!\n\n|since_notitg_v1|\n\n","returns":["void"]},"hascommand":{"args":[{"description":"The command name to check, without the ``Command`` suffix","name":"commandName","type":["string"]}],"description":"\n|since_notitg_v4|\n\n","returns":["boolean"]},"heading":{"args":[{"description":"The value to add, in degrees","name":"rotY","type":["number"]}],"description":"\nAlways rotates around the top-left corner of the screen\n\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"hibernate":{"args":[{"description":"How long to hide the actor for, in seconds","name":"time","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"hidden":{"args":[{"description":"``1`` to hide the actor, ``0`` to show the actor","name":"enable","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"horizalign":{"args":[{"description":"The new horizontal alignment to set (``left``, ``center``, or ``right``)","name":"hAlign","type":["string"]}],"description":"\nThis effectively changes the origin point of the actor\n\nSee :lua:meth:`Actor.halign` for a more precise alignment\n\nNot tweenable!\n\n|since_itg|\n\n","returns":["void"]},"hurrytweening":{"args":[{"description":"The scale factor to apply","name":"factor","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"linear":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]}],"description":"\nTweenable methods called after this will be linearly interpolated\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"luaeffect":{"args":[{"description":"The name of the command to fire each frame","name":"name","type":["string"]}],"description":"\nThis causes ``<name>Command`` to be fired on the actor every frame\n\n|since_itg|\n\n","returns":["void"]},"pause":{"description":"\n|since_itg|\n","returns":["void"]},"pitch":{"args":[{"description":"The value to add, in degrees","name":"rotX","type":["number"]}],"description":"\nAlways rotates around the top-left corner of the screen\n\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"play":{"description":"\n|since_itg|\n","returns":["void"]},"playcommand":{"args":[{"description":"The command to execute, without the ``Command`` suffix","name":"commandName","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"position":{"args":[{"description":"The new position to set","name":"position","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"pulse":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"pulseramp":{"description":"\n|effect|\n\n|since_notitg_v3|\n","returns":["void"]},"queuecommand":{"args":[{"description":"The command to execute, without the ``Command`` suffix","name":"commandName","type":["string"]}],"description":"\nThis is \"tweenable\" in the sense that the command will be executed after tweens complete. This is useful in\nconjunction with the :lua:meth:`Actor.sleep` tween.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"queuemessage":{"args":[{"description":"The message to broadcast","name":"messageName","type":["string"]}],"description":"\nRarely used - you may want to consider :lua:meth:`MessageManager.Broadcast` instead.\n\n|since_itg|\n\n","returns":["void"]},"rainbow":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"removecommand":{"args":[{"description":"The command to remove, without the ``Command`` suffix","name":"commandName","type":["string"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"roll":{"args":[{"description":"The value to add, in degrees","name":"rotZ","type":["number"]}],"description":"\nAlways rotates around the top-left corner of the screen\n\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"rotationx":{"args":[{"description":"The new X rotation to set, in degrees","name":"rotX","type":["number"]}],"description":"\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"rotationx2":{"args":[{"description":"The new X rotation to set","name":"rotX","type":["number"]}],"description":"\nThis cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"rotationxyz2":{"args":[{"description":"The new X rotation to set","name":"xPos","type":["number"]},{"description":"The new Y rotation to set","name":"yPos","type":["number"]},{"description":"The new Z rotation to set","name":"zPos","type":["number"]}],"description":"\nThese cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"rotationy":{"args":[{"description":"The new Y rotation to set, in degrees","name":"rotY","type":["number"]}],"description":"\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"rotationy2":{"args":[{"description":"The new Y rotation to set","name":"rotY","type":["number"]}],"description":"\nThis cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"rotationz":{"args":[{"description":"The new Z rotation to set, in degrees","name":"rotZ","type":["number"]}],"description":"\nNote that the default rotation order for actors is ZYX. This can be changed using ``Actor.SetRotationOrder()``.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"rotationz2":{"args":[{"description":"The new Z rotation to set","name":"rotZ","type":["number"]}],"description":"\nThis cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"scaletocover":{"args":[{"description":"The left coordinate of the rectangle","name":"left","type":["number"]},{"description":"The top coordinate of the rectangle","name":"top","type":["number"]},{"description":"The right coordinate of the rectangle","name":"right","type":["number"]},{"description":"The bottom coordinate of the rectangle","name":"bottom","type":["number"]}],"description":"\nThis does not preserve aspect ratio - see :lua:meth:`Actor.scaletofit` instead if you want that\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"scaletofit":{"args":[{"description":"The left coordinate of the rectangle","name":"left","type":["number"]},{"description":"The top coordinate of the rectangle","name":"top","type":["number"]},{"description":"The right coordinate of the rectangle","name":"right","type":["number"]},{"description":"The bottom coordinate of the rectangle","name":"bottom","type":["number"]}],"description":"\nSee :lua:meth:`Actor.scaletocover` if you don't care about preserving aspect ratio\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"setstate":{"args":[{"description":"The frame to show (0 indexed)","name":"state","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"shadowlength":{"args":[{"description":"The new shadow length to set","name":"length","type":["number"]}],"description":"\nNot tweenable!\n\n|since_itg|\n\n","returns":["void"]},"skewto":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\nThis is effectively the same as ``Actor.skewx()`` with ``amount`` divided by the original (unzoomed) width of the actor.\n\n|tweenable|\n\n|since_notitg_v1|\n\n","returns":["void"]},"skewx":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"skewx2":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"skewx_before_rotation":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\nNot tweenable!\n\n|since_notitg_v4|\n\n","returns":["void"]},"skewy":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\n|tweenable|\n\n|since_notitg_v4|\n\n","returns":["void"]},"skewy2":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"skewy_before_rotation":{"args":[{"description":"How far the actor should be skewed","name":"amount","type":["number"]}],"description":"\nNot tweenable!\n\n|since_notitg_v4|\n\n","returns":["void"]},"sleep":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]}],"description":"\nTweenable methods called after do nothing for the duration of the sleep tween, before instantly teleporting at the end\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"spin":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"spring":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]}],"description":"\nTweenable methods called after this will accelerate and go beyond their end point, before springing back\n\n|tween|\n\n|since_itg|\n\n","returns":["void"]},"stopeffect":{"description":"\n|since_itg|\n","returns":["void"]},"stoptweening":{"description":"\nIf you would rather have tweens teleport to their end points, use :lua:meth:`Actor.finishtweening` instead.\n\n|since_itg|\n","returns":["void"]},"stretchto":{"args":[{"description":"The X coordinate of the top left corner","name":"x1","type":["number"]},{"description":"The Y coordinate of the top left corner","name":"y1","type":["number"]},{"description":"The X coordinate of the bottom right corner","name":"x2","type":["number"]},{"description":"The Y coordinate of the bottom right corner","name":"y2","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"texturefiltering":{"args":[{"description":"Whether texture filtering should be enabled","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"texturewrapping":{"args":[{"description":"``1`` to enable, ``0`` to disable","name":"enable","type":["number"]}],"description":"\nDefault value is ``0`` (disabled)\n\n|since_itg|\n\n","returns":["void"]},"tween":{"args":[{"description":"How long the tween should last, in seconds","name":"duration","type":["number"]},{"description":"Either a Lua expression mapping time to interpolation percent, or a Lua function taking a time argument and returning a number","name":"expression","type":["string","function"]}],"description":"\nA custom Lua expression can be passed to ``expression``. For example, an expression of ``%f * %f * %f`` makes a cubic accelerate tween.\n\nSince |notitg_v4_2_0|, a function can also be passed to ``expression``.\n\n|tween|\n\n|since_notitg_v3|\n\n","returns":["void"]},"valign":{"args":[{"description":"The new vertical alignment to set","name":"vPos","type":["number"]}],"description":"\nThis effectively changes the origin point of the actor\n\nA vertical alignment of ``0`` will top-align the actor, ``0.5`` will center align, and ``1`` will bottom align.\nYou can also specify values outside of the range of 0 - 1.\n\nNot tweenable!\n\n|since_notitg_v1|\n\n","returns":["void"]},"vertalign":{"args":[{"description":"The new vertical alignment to set (``top``, ``middle``, ``bottom``)","name":"vAlign","type":["string"]}],"description":"\nThis effectively changes the origin point of the actor\n\nSee :lua:meth:`Actor.valign` for a more precise alignment\n\nNot tweenable!\n\n|since_itg|\n\n","returns":["void"]},"vibrate":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"visible":{"args":[{"description":"``0`` to hide the actor, ``1`` to show the actor","name":"enable","type":["number"]}],"description":"\nThis is simply :lua:meth:`Actor.hidden` but inverted\n\n|since_itg|\n\n","returns":["void"]},"wag":{"description":"\n|effect|\n\n|since_itg|\n","returns":["void"]},"x":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"x2":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]}],"description":"\nThis cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"xy":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]},{"description":"The new Y position to set","name":"yPos","type":["number"]}],"description":"\nNote that a greater Y value moves an actor *down*, not up.\n\n|tweenable|\n\n|since_notitg_v1|\n\n","returns":["void"]},"xy2":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]},{"description":"The new Y position to set","name":"yPos","type":["number"]}],"description":"\nThese cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"xywh":{"args":[{"description":"The new X position","name":"x","type":["number"]},{"description":"The new Y position","name":"y","type":["number"]},{"description":"The new width","name":"w","type":["number"]},{"description":"The new height","name":"h","type":["number"]}],"description":"\nNote that a greater Y value moves an actor *down*, not up.\n\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"xyz":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]},{"description":"The new Y position to set","name":"yPos","type":["number"]},{"description":"The new Z position to set","name":"zPos","type":["number"]}],"description":"\nNote that a greater Y value moves an actor *down*, not up.\n\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"xyz2":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]},{"description":"The new Y position to set","name":"yPos","type":["number"]},{"description":"The new Z position to set","name":"zPos","type":["number"]}],"description":"\nThese cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"xyza":{"args":[{"description":"The new X position to set","name":"xPos","type":["number"]},{"description":"The new Y position to set","name":"yPos","type":["number"]},{"description":"The new Z position to set","name":"zPos","type":["number"]},{"description":"The new aux value to set","name":"aux","type":["number"]}],"description":"\nNote that a greater Y value moves an actor *down*, not up.\n\n|tweenable|\n\n|since_notitg_v3|\n\n","returns":["void"]},"y":{"args":[{"description":"The new Y position to set","name":"yPos","type":["number"]}],"description":"\nNote that a greater Y value moves an actor *down*, not up.\n\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"y2":{"args":[{"description":"The new Y position to set","name":"yPos","type":["number"]}],"description":"\nThis cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"z":{"args":[{"description":"The new Z position to set","name":"zPos","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"z2":{"args":[{"description":"The new Z position to set","name":"zPos","type":["number"]}],"description":"\nThis cannot be tweened and must be set on an update loop.\n\n|since_notitg_v4|\n\n","returns":["void"]},"zbias":{"args":[{"description":"The bias to apply","name":"bias","type":["number"]}],"description":"\nThis value defaults to ``0``.\n\nUseful to avoid Z-fighting\n\n|since_itg|\n\n","returns":["void"]},"zbuffer":{"args":[{"description":"``1`` to enable, ``0`` to disable","name":"enable","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"zoom":{"args":[{"description":"The new X/Y scale to set","name":"scale","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"zoom2":{"args":[{"description":"The new X/Y scale to set","name":"scale","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"zoomto":{"args":[{"description":"The desired width","name":"width","type":["number"]},{"description":"The desired height","name":"height","type":["number"]}],"description":"\nThis does the same thing as calling both :lua:meth:`Actor.zoomtowidth` and :lua:meth:`Actor.zoomtoheight`.\n\n|tweenable|\n\n|since_itg|\n\n\n","returns":["void"]},"zoomtoheight":{"args":[{"description":"The desired height","name":"height","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n\n","returns":["void"]},"zoomtowidth":{"args":[{"description":"The desired width","name":"width","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n\n","returns":["void"]},"zoomx":{"args":[{"description":"The new X scale to set","name":"scale","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"zoomx2":{"args":[{"description":"The new X scale to set","name":"scale","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"zoomxyz2":{"args":[{"description":"The new X scale to set","name":"scaleX","type":["number"]},{"description":"The new Y scale to set","name":"scaleY","type":["number"]},{"description":"The new Z scale to set","name":"scaleZ","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"zoomy":{"args":[{"description":"The new Y scale to set","name":"scale","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"zoomy2":{"args":[{"description":"The new Y scale to set","name":"scale","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"zoomz":{"args":[{"description":"The new Z scale to set","name":"scale","type":["number"]}],"description":"\n|tweenable|\n\n|since_itg|\n\n","returns":["void"]},"zoomz2":{"args":[{"description":"The new Z scale to set","name":"scale","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ztest":{"args":[{"description":"``1`` to write fragments when the Z test passes and discard fragments otherwise, ``0`` to disable Z testing","name":"enable","type":["number"]}],"description":"\nThis is a shortcut for :lua:meth:`Actor.ztestmode`\n\n|since_itg|\n\n","returns":["void"]},"ztestmode":{"args":[{"description":"``off``, ``writeonpass``, or ``writeonfail``","name":"mode","type":["string"]}],"description":"\nZ testing is often used when rendering 3D objects to ensure that objects closer to the camera are drawn on top of\nobjects further away. When an object is drawn, it'll write the depth of each fragment into a depth buffer (if\n:lua:meth:`zwrite` is enabled). When drawing another object, the depth of each fragment of the new object will be\ntested against the depth of each fragment in the depth buffer. When typically rendering a 3D scene, only fragments\nthat have a lower depth (fragments that are closer to the camera) will be drawn, with fragments further away than\nwhat's stored in the depth buffer (and thus behind the first object) discarded.\n\nNote that if you're rendering translucent objects, enabling depth testing can cause issues with objects disappearing\nbehind other objects if they're not draw in in a back-to-front order. The order of actors in an XML file determines\nthe order in which they are drawn.\n\nZ test mode is ``off`` by default.\n\nAvailable Z test modes include...\n\n``off``: Disable Z testing\n``writeonpass``: Write fragments when the Z test passes (usual 3D behaviour)\n``writeonfail``: Write fragments when the Z test fails\n\n|since_itg|\n\n\n","returns":["void"]},"zwrite":{"args":[{"description":"``1`` to enable, ``0`` to disable","name":"enable","type":["number"]}],"description":"\nThis is disabled by default\n\n|since_itg|\n\n","returns":["void"]}},"ActorFrame":{"GetChild":{"args":[{"description":"The name of the child to get","name":"name","type":["string"]}],"description":"\nWill return ``nil`` if no child exists at with the specified name\n\n|since_itg|\n\n","returns":["Actor","nil"]},"GetChildAt":{"args":[{"description":"The index of the child to get","name":"index","type":["number"]}],"description":"\nWill return ``nil`` if no child exists at the given index\n\n|since_notitg_v1|\n\n","returns":["Actor","nil"]},"GetChildren":{"description":"\n|since_notitg_v4|\n","returns":["array"]},"GetNumChildren":{"description":"\n|since_itg|\n","returns":["number"]},"SetDrawByZPosition":{"args":[{"description":"Whether the \"draw by Z positon\" behavious should be enabled","name":"enable","type":["boolean"]}],"description":"\nThis is disabled by default\n\n|since_itg|\n\n","returns":["void"]},"SetDrawFunction":{"args":[{"description":"The function to call at every draw attempt","name":"drawFunc","type":["function"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetFOV":{"args":[{"description":"The new field-of-view to use, in degrees","name":"fov","type":["number"]}],"description":"\nThis is just an alias for :lua:meth:`ActorFrame.fov`\n\n|since_itg|\n\n","returns":["void"]},"SetFarDist":{"args":[{"description":"The new draw distance t oset","name":"farDist","type":["number"]}],"description":"\nThe default is ``1000``\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetUpdateCommand":{"args":[{"description":"The command name to call on updates","name":"name","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetUpdateFunction":{"args":[{"description":"The function to call on updates","name":"updateFunc","type":["function"]}],"description":"\nSince |notitg_v4_2_0|, on error, a dialog is shown and the update function is unset.\n\n|since_itg|\n\n","returns":["void"]},"SetUpdateRate":{"args":[{"description":"The new update rate to use","name":"rate","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetVanishPoint":{"args":[{"description":"The X coordinate to set","name":"x","type":["number"]},{"description":"The Y coordinate to set","name":"y","type":["number"]}],"description":"\nThe default is ``SCREEN_CENTER_X, SCREEN_CENTER_Y``\n\n|since_notitg_v1|\n\n","returns":["void"]},"SetVanishX":{"args":[{"description":"The X coordinate to set","name":"x","type":["number"]}],"description":"\nThe default is ``SCREEN_CENTER_X``\n\n|since_notitg_v1|\n\n","returns":["void"]},"SetVanishY":{"args":[{"description":"The Y coordinate to set","name":"y","type":["number"]}],"description":"\nThe default is ``SCREEN_CENTER_Y``\n\n|since_notitg_v1|\n\n","returns":["void"]},"fov":{"args":[{"description":"The new field-of-view to use, in degrees","name":"fov","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"inherits":"Actor","propagate":{"args":[{"description":"``1`` to enable, ``0`` to disable","name":"enable","type":["number"]}],"description":"\nThis is disabled by default\n\n|since_itg|\n\n","returns":["void"]},"propagateshaders":{"args":[{"description":"``1`` to enable, ``0`` to disable","name":"enable","type":["number"]}],"description":"\nThis is disabled by default\n\n|since_notitg_v3|\n\n","returns":["void"]}},"ActorFrameTexture":{"Create":{"description":"\nThis should be called after configuring the ActorFrameTexture (using methods such as :lua:meth:`EnableDepthBuffer` and what not)\n\n|since_notitg_v1|\n","returns":["void"]},"EnableAlphaBuffer":{"args":[{"description":"Whether an alpha buffer should be created","name":"enable","type":["boolean"]}],"description":"\nThis is disabled by default\n\n|since_notitg_v1|\n\n","returns":["void"]},"EnableDepthBuffer":{"args":[{"description":"Whether a depth buffer should be created","name":"enable","type":["boolean"]}],"description":"\nThis is disabled by default\n\n|since_notitg_v1|\n\n","returns":["void"]},"EnableFloat":{"args":[{"description":"Whether floating point buffers should be used","name":"enable","type":["boolean"]}],"description":"\nThis is disabled by default\n\n|since_notitg_v1|\n\n","returns":["void"]},"EnableGrayscale":{"args":[{"description":"Whether the render target should be grayscale","name":"enable","type":["boolean"]}],"description":"\nThis is disabled by default\n\n|since_notitg_v2|\n\n","returns":["void"]},"EnablePreserveTexture":{"args":[{"description":"Whether preserve texture should be enabled or not","name":"enable","type":["boolean"]}],"description":"\nIf preserve texture is enabled, then the render target will not be cleared when rendering.\n\nThis is disabled by default (ie: it defaults to clearing the target before rendering)\n\n|since_notitg_v1|\n\n","returns":["void"]},"GetTexture":{"description":"\n|since_notitg_v1|\n","returns":["RageTextureRenderTarget"]},"GetTextureName":{"description":"\n|since_notitg_v1|\n","returns":["string"]},"Recreate":{"description":"\n|since_notitg_unk| (|notitg_v4| or earlier?)\n","returns":["void"]},"SetTextureName":{"args":[{"description":"The new name for the texture","name":"name","type":["string"]}],"description":"\nThis can be used to reference the ActorFrameTexture's texture/render target from another actor\n\n|since_notitg_v1|\n\n","returns":["void"]},"inherits":"ActorFrame"},"ActorProxy":{"GetTarget":{"description":"\n|since_notitg_v1|\n","returns":["Actor","nil"]},"SetTarget":{"args":[{"description":"The actor this proxy will re-draw, or nil to un-set the target (``nil`` is only accepted since |notitg_v4|)","name":"actor","type":["Actor","nil"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"inherits":"Actor"},"ActorScroller":{"SetCurrentAndDestinationItem":{"args":[{"description":"The index of the targetted item","name":"index","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"inherits":"ActorFrame"},"ActorSound":{"get":{"description":"\n|since_notitg_v1|\n","returns":["RageSound"]},"inherits":"Actor","load":{"args":[{"description":"The filepath of the sound to load","name":"path","type":["string"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"pause":{"args":[{"description":"``true`` to pause, ``false`` to unpause","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"play":{"description":"\nOverridden from :lua:meth:`Actor.play`\n\n|since_notitg_v1|\n","returns":["void"]},"start":{"description":"\nIf you want to resume a paused sound, use :lua:meth:`ActorSound.pause`\n\n|since_notitg_v1|\n","returns":["void"]},"stop":{"description":"\n|since_notitg_v1|\n","returns":["void"]}},"BitmapText":{"GetText":{"description":"\n|since_itg|\n","returns":["string"]},"inherits":"Actor","maxheight":{"args":[{"description":"The new maximum height to set, or 0 to disable the height limit","name":"height","type":["number"]}],"description":"\nThis is independent of the actor's zoom\n\n|since_itg|\n\n","returns":["void"]},"maxwidth":{"args":[{"description":"The new maximum width to set, or 0 to disable the width limit","name":"width","type":["number"]}],"description":"\nThis is independent of the actor's zoom\n\n|since_itg|\n\n","returns":["void"]},"settext":{"args":[{"description":"The new text to display","name":"text","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"wrapwidthpixels":{"args":[{"description":"Where to start wrapping text (in pixels)","name":"width","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]}},"Course":{"GetCourseDir":{"description":"\n|since_itg|\n","returns":["string"]},"GetDisplayFullTitle":{"description":"\n|since_itg|\n","returns":["string"]},"GetPlayMode":{"description":"\n``1`` = Non stop, ``2`` = Oni, ``3`` = Endless\n\n|since_itg|\n","returns":["number"]},"GetTranslitFullTitle":{"description":"\n|since_itg|\n","returns":["string"]}},"DifficultyMeter":{"Load":{"args":[{"description":"The path to load","name":"path","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetFromMeterAndDifficulty":{"args":[{"description":"The rated numerical difficulty to use","name":"meter","type":["number"]},{"description":"The difficulty to use - See :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetFromSteps":{"args":[{"description":"The steps to use","name":"steps","type":["Steps"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetFromTrail":{"args":[{"description":"The trail to use","name":"trail","type":["Trail"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"inherits":"ActorFrame"},"FadingBanner":{"LoadFromSong":{"args":[{"description":"The song to load the banner from","name":"song","type":["Song"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"ScaleToClipped":{"args":[{"description":"The desired width","name":"width","type":["number"]},{"description":"The desired height","name":"height","type":["number"]}],"description":"\nThis is identical to :lua:meth:`Sprite.scaletoclipped`\n\n|since_itg|\n\n","returns":["void"]},"inherits":"ActorFrame"},"Game":{"GetName":{"description":"\nWill be ``dance`` or ``lights``\n\n|since_itg|\n","returns":["string"]}},"GameSoundManager":{"DimMusic":{"args":[{"description":"The target volume (between ``0`` and ``1``)","name":"volume","type":["number"]},{"description":"How long to keep the music at the specified volume, in seconds","name":"duration","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"PlayOnce":{"args":[{"description":"The path to the audio file to play","name":"path","type":["string"]}],"description":"\nNote that if the ``MuteActions`` preference is enabled, the sound won't be played\n\n|since_itg|\n\n","returns":["void"]}},"GameState":{"AnyPlayerHasRankingFeats":{"description":"\n|since_itg|\n","returns":["boolean"]},"ApplyGameCommand":{"args":[{"description":"The command to execute","name":"cmd","type":["string"]},{"description":"The player number to apply the command to (1 indexed - nil to apply it to both players)","name":"playerNumber","type":["number","nil"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"ApplyModifiers":{"args":[{"description":"A mod string to apply","name":"mods","type":["string"]},{"description":"An optional player number to apply mods to (1 indexed)","name":"playerNumber","type":["number","nil"]}],"description":"\nSince |notitg_v4_2_0|, this will throw a Lua error with an invalid ``playerNumber``\n\n|since_notitg_v2|\n\n","returns":["void"]},"Crash":{"args":[{"description":"A message to show on the crash dialog","name":"message","type":["string"]}],"description":"\n|since_notitg_unk|\n\n","returns":["never"]},"DelayedGameCommand":{"args":[{"description":"The command to execute","name":"cmd","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"Env":{"description":"\n|since_itg|\n\n","returns":["table"]},"FinishSong":{"description":"\nThis is equivalent to the \"Send Noted Ended\" option in the debug (F3) menu.\n\n|since_notitg_v1|\n","returns":["void"]},"ForceSmoothLines":{"args":[{"description":"0 to force disable, 1 to force enable, -1 to reset","name":"enable","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"GetCoinMode":{"description":"\nSee the :cpp:enum:`CoinMode` enum\n\n|since_itg|\n","returns":["number"]},"GetCoins":{"description":"\n|since_itg|\n","returns":["number"]},"GetCoinsNeededToJoin":{"description":"\nEg: If 3 coins are needed, and 1 is inserted, this function will return 2\n\n|since_itg|\n","returns":["number"]},"GetCourseSongIndex":{"description":"\n|since_itg|\n","returns":["number"]},"GetCurBPM":{"description":"\n|since_notitg_v4_0_1|\n\n","returns":["number"]},"GetCurBPS":{"description":"\nPrefer ``GAMESTATE:GetCurBPM()`` over ``GAMESTATE:GetCurBPS() * 60`` to get a more accurate value for beats per minute.\n\n|since_itg|\n\n","returns":["number"]},"GetCurrentCourse":{"description":"\n|since_itg|\n","returns":["Course"]},"GetCurrentGame":{"description":"\n|since_itg|\n","returns":["Game"]},"GetCurrentNoteSkins":{"description":"\nExample output: ``{ \"scalable\", \"cyber\" }`` if player 1 is using the scalable note skin, and player 2 is using\ncyber. This seems to be set to ``{ \"default\", \"default\" }`` often when opening mod files though, so not sure what's\nup with that.\n\n|since_notitg_v4|\n","returns":["table"]},"GetCurrentSong":{"description":"\n|since_itg|\n","returns":["Song"]},"GetCurrentSteps":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["Steps"]},"GetCurrentTrail":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["Trail","nil"]},"GetDerp":{"description":"\n|since_notitg_v1|\n","returns":["boolean"]},"GetEasiestStepsDifficulty":{"description":"\nSee the :cpp:enum:`Difficulty` enum\n\n|since_itg|\n","returns":["number"]},"GetEditSourceSteps":{"description":"\n|since_itg|\n","returns":["Steps","nil"]},"GetEnv":{"args":[{"description":"The key to fetch a value for","name":"key","type":["string"]}],"description":"\nReturns ``nil`` if the key doesn't exist\n\n|since_itg|\n\n\n","returns":["string","nil"]},"GetExternal":{"args":[{"description":"Index of the external (0 - 255)","name":"index","type":["number"]}],"description":"\nSince |notitg_v4_2_0|, the number of external slots has been increased from 64 to 256.\n\n|since_notitg_v3|\n\n","returns":["void"]},"GetFileStructure":{"args":[{"description":"The path to match","name":"path","type":["string"]}],"description":"\nThis function returns a variable number of strings - you should probably wrap it up into a table.\n\n**Example:**\n\n``local matches = { GAMESTATE:GetFileStructure('Co') }``\n\n``matches`` will contain ``{ \"copyright.txt\", \"Courses\" }``\n\n|since_notitg_v1|\n\n","returns":["multiple"]},"GetInputMode":{"description":"\n|since_notitg_v1|\n\nSee the :cpp:enum:`InputMode` enum\n","returns":["number"]},"GetMasterPlayerNumber":{"description":"\nUsed in double mode to determine if the user is controlling the game from the P1 or P2 side (0 = player 1, 1 = player 2).\n\n|since_itg|\n","returns":["number"]},"GetMusicRate":{"description":"\n|since_notitg_v2|\n","returns":["number"]},"GetNumPlayersEnabled":{"description":"\n|since_itg|\n","returns":["number"]},"GetNumSidesJoined":{"description":"\n|since_itg|\n","returns":["number"]},"GetPlayMode":{"description":"\nNot entirely sure if the play mode enum has changed since ITG and SM5, but here's the SM5 docs for PlayMode: https://quietly-turning.github.io/Lua-For-SM5/LuaAPI#Enums-PlayMode\n\n|since_itg|\n","returns":["number"]},"GetPlayerDisplayName":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"GetPlayerNameFromNameEntry":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["string"]},"GetPreferredDifficulty":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\nSee the :cpp:enum:`Difficulty` enum\n\n|since_itg|\n\n","returns":["number"]},"GetPreferredSong":{"description":"\n|since_itg|\n","returns":["Song"]},"GetPremium":{"description":"\nSee the :cpp:enum:`Premium` enum\n\n|since_itg|\n","returns":["number"]},"GetRealPath":{"args":[{"description":"The path to get the \"real\" equivalent for","name":"path","type":["string"]}],"description":"\nIt works pretty well with \"AdditionalSongFolders\"\n\nEg: ``GAMESTATE:GetRealPath(GAMESTATE:GetCurrentSong():GetSongDir() .. './fg/default.xml') -- Returns 'D:/AdditionalSongFolder/Group/Song/fg/default.xml'``\n\n|since_notitg_v4|\n\n","returns":["void"]},"GetScreenID":{"description":"\nWill return 573555 if in ``ScreenGameplay`` or if playing in ``ScreenEdit``, 0 otherwise.\n\n|since_notitg_v1|\n","returns":["number"]},"GetSongBeat":{"description":"\n|since_itg|\n","returns":["number"]},"GetSongBeatVisible":{"description":"\nInterestingly, this seems to return the same value as :lua:meth:`GameState.GetSongBeat`, even if you have a global audio offset. You might have better luck with ``GAMESTATE:GetSongBeat() + (PREFSMAN:GetPreference('GlobalOffsetSeconds') * GAMESTATE:GetCurBPS())``.\n\n|since_itg|\n","returns":["number"]},"GetSongTime":{"description":"\n|since_notitg_v2|\n","returns":["number"]},"GetSongTimeVisible":{"description":"\nInterestingly, this seems to return the same value as ``GAMESTATE:GetSongTime()``, even if you have a global audio offset. You might have better luck with ``GAMESTATE:GetSongTime() + PREFSMAN:GetPreference('GlobalOffsetSeconds')``.\n\n|since_notitg_v2|\n","returns":["number"]},"GetSortOrder":{"description":"\nSee the :cpp:enum:`SortOrder` enum\n\n|since_itg|\n","returns":["number"]},"GetVersionDate":{"description":"\n|since_notitg_v1|\n","returns":["string"]},"GetX":{"args":[{"description":"Which playfield to use (0 indexed)","name":"playerNumber","type":["number"]},{"description":"Which column to use (0 or greater)","name":"column","type":["number"]},{"description":"The vertical offset of the note compared to the receptors","name":"yOffset","type":["number"]}],"description":"\nUsed for calculating manually where a note should be based on which modifiers are active and its vertical position.\n\n|since_notitg_v2|\n\n","returns":["number"]},"GetY":{"args":[{"description":"Which playfield to use (0 indexed)","name":"playerNumber","type":["number"]},{"description":"Which column to use (0 or greater)","name":"column","type":["number"]},{"description":"The vertical offset of the note compared to the receptors","name":"yOffset","type":["number"]}],"description":"\nUsed for calculating manually where a note should be based on which modifiers are active and its vertical position.\n\n|since_notitg_v2|\n\n","returns":["number"]},"GetZ":{"args":[{"description":"Which playfield to use (0 indexed)","name":"playerNumber","type":["number"]},{"description":"Which column to use (0 or greater)","name":"column","type":["number"]},{"description":"The vertical offset of the note compared to the receptors","name":"yOffset","type":["number"]}],"description":"\nUsed for calculating manually where a note should be based on which modifiers are active and its vertical position.\n\n|since_notitg_v2|\n\n","returns":["number"]},"HideStageText":{"args":[{"description":"Unknown","name":"val","type":["boolean"]}],"description":"\n\n|since_unk|\n","returns":["void"]},"IsCourseMode":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsDemonstration":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsDisqualified":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"IsEditMode":{"description":"\n|since_notitg_v1|\n","returns":["boolean"]},"IsEventMode":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsExtraStage":{"description":"\nThis function is also accessible via the *global* function ``IsExtraStage()``\n\n|since_itg|\n","returns":["boolean"]},"IsExtraStage2":{"description":"\nThis function is also accessible via the *global* function ``IsExtraStage2()``\n\n|since_itg|\n","returns":["boolean"]},"IsGoalComplete":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"IsHumanPlayer":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"IsPlayerEnabled":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"IsSideJoined":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"IsSyncDataChanged":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsWinner":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"JoinPlayer":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_notitg_v1|\n","returns":{}},"KeyPress":{"args":[{"description":"The key code","name":"key","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"LaunchAttack":{"args":[{"description":"The time (in seconds) where the attack should start","name":"startTime","type":["number"]},{"description":"The length of an attack in seconds (0 or greater)","name":"length","type":["number"]},{"description":"The mod string to apply","name":"mods","type":["string"]},{"description":"The player to apply the mods for (1 indexed) - if nil, apply to both players","name":"playerNumber","type":["number","nil"]}],"description":"\nThis attack will disable any currently active Lua mods. It's recommended to call this method in an InitCommand, as this can generate some lag spikes.\n\n|since_notitg_v2|\n\n","returns":["void"]},"OnlyOpenITGMods":{"args":[{"description":"Whether only OpenITG mods should be allowed or not","name":"enable","type":["boolean"]}],"description":"\nThis will disqualify you\n\n|since_notitg_v4_2_0|\n\n","returns":["void"]},"PlayerDifficulty":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\nSee the :cpp:enum:`Difficulty` enum\n\n|since_unk|\n\n","returns":["number"]},"PlayerIsUsingModifier":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]},{"description":"The modifier to check","name":"modifier","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"PlayerUsingBothSides":{"description":"\n|since_itg|\n","returns":["number"]},"PlayersCanJoin":{"description":"\n|since_itg|\n","returns":["boolean"]},"RecompileShadersOnResize":{"args":[{"description":"Whether shaders should be recompiled on window resize??","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"ReloadSteps":{"description":"\nThis is required after changing the song position to update the arrows (Eg: with :lua:meth:`GameState.SetSongBeat`)\n\n|since_notitg_v1|\n\n","returns":["void"]},"SetCurrentCourse":{"args":[{"description":"The course to use","name":"course","type":["Course"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetCurrentSong":{"args":[{"description":"The song to use","name":"song","type":["Song"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetCurrentSteps":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]},{"description":"The steps to use","name":"steps","type":["Steps"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetEnv":{"args":[{"description":"The key to store a value for","name":"key","type":["string"]},{"description":"The value to store","name":"value","type":["string"]}],"description":"\n|since_itg|\n\n\n","returns":["void"]},"SetExternal":{"args":[{"description":"Index of the external (0 - 255)","name":"index","type":["number"]},{"description":"Index of the external","name":"flag","type":["number"]}],"description":"\nThis address is `0x008BE0F8` for |notitg_v3_1|\n\nSince |notitg_v4_2_0|, the number of external slots has been increased from 64 to 256.\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetInputMode":{"args":[{"description":"The new input mode to set","name":"inputMode","type":["number"]}],"description":"\n|since_notitg_v1|\n\nSee the :cpp:enum:`InputMode` enum\n\n","returns":["void"]},"SetPreferredSong":{"args":[{"description":"The song to use","name":"song","type":["Song"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetSRT":{"args":[{"description":"Unknown","name":"num","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetScreenID":{"args":[{"description":"The new ID","name":"id","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetSongBeat":{"args":[{"description":"The beat to teleport to","name":"beat","type":["number"]}],"description":"\nYou need to run :lua:meth:`GameState.ReloadSteps` after calling this if you want arrows to update properly.\n\n|since_notitg_v1|\n\n","returns":{}},"SetSongEndTime":{"args":[{"description":"The time the song should end, in seconds","name":"seconds","type":["number"]}],"description":"\n|since_notitg_v4_2_0|\n\n","returns":["void"]},"SetSongPosition":{"args":[{"description":"The position to teleport to (in seconds)","name":"position","type":["number"]}],"description":"\nYou need to run :lua:meth:`GameState.ReloadSteps` after calling this if you want arrows to update properly.\n\n|since_notitg_v1|\n\n\n","returns":["void"]},"SetTemporaryEventMode":{"args":[{"description":"Whether tempoary event mode should be enabled or not","name":"enable","type":["boolean"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"StageIndex":{"description":"\n|since_itg|\n","returns":["number"]},"UnloadSteps":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]}},"HelpDisplay":{"gettips":{"description":"\n|since_itg|\n","returns":["table"]},"inherits":"BitmapText","settips":{"args":[{"description":"The new tips to set","name":"tips","type":["table"]},{"description":"The new alternate tips to set","name":"altTips","type":["table","nil"]}],"description":"\n|since_itg|\n\n","returns":["void"]}},"HighScore":{"GetDate":{"description":"\n|since_itg|\n","returns":["string"]},"GetModifiers":{"description":"\n|since_itg|\n","returns":["string"]},"GetName":{"description":"\n|since_itg|\n","returns":["string"]},"GetPercentDP":{"description":"\n|since_itg|\n","returns":["number"]},"GetScore":{"description":"\n|since_itg|\n","returns":["number"]},"GetSurvivalSeconds":{"description":"\n|since_itg|\n","returns":["number"]},"IsFillInMarker":{"description":"\n|since_itg|\n","returns":["boolean"]}},"HighScoreList":{"GetHighScores":{"description":"\n|since_itg|\n","returns":["array"]}},"MemoryCardManager":{"GetCardState":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\nSee :cpp:enum:`MemoryCardState`\n\n|since_itg|\n\n","returns":["number"]}},"MessageManager":{"Broadcast":{"args":[{"description":"The message command to broadcast","name":"message","type":["string"]}],"description":"\nSee :doc:`/message_commands`\n\n|since_itg|\n\n","returns":["number"]}},"Model":{"GetCurrentFrame":{"description":"\n|since_notitg_v2|\n","returns":["number"]},"GetTotalFrames":{"description":"\n|since_notitg_v2|\n","returns":["number"]},"LoadMilkshapeAscii":{"args":[{"description":"The path to the model to load","name":"path","type":["string"]}],"description":"\nEg: ``world.earth:LoadMilkshapeAscii(GAMESTATE:GetCurrentSong():GetSongDir() .. 'fg/model/circle_outline.obj.txt')``\n\n|since_notitg_v2|\n\n","returns":["void"]},"LoadMilkshapeAsciiBones":{"args":[{"description":"The animation name","name":"aniName","type":["string"]},{"description":"The path to the skeleton file to load","name":"path","type":["string"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]},"LoadMilkshapeAsciiMaterials":{"args":[{"description":"The path to the materials file to load","name":"path","type":["string"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]},"ResetAlphaTexture":{"args":[{"description":"The texture slot to clear (0 indexed)","name":"index","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"ResetTexture":{"args":[{"description":"The texture slot to clear (0 indexed)","name":"index","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetAlphaTexture":{"args":[{"description":"The texture slot index (0 indexed)","name":"index","type":["number"]},{"description":"The texture to set in the slot","name":"texture","type":["RageTexture"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetAnimationRate":{"args":[{"description":"The new rate to set","name":"rate","type":["number"]}],"description":"\n|since_notitg_v2|\n\n","returns":["number"]},"SetCelShaded":{"args":[{"description":"Whether cel shading should be enabled","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetInvertCelPass":{"args":[{"description":"Whether cel shading should be inverted","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]},"SetLineColor":{"args":[{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetLineWidth":{"args":[{"description":"The new width to set","name":"width","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetOutlinesOnTop":{"args":[{"description":"Whether outlines should be drawn on top","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]},"SetPolygonMode":{"args":[{"description":"The new mode to set - see :cpp:enum:`PolygonMode`","name":"mode","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTexture":{"args":[{"description":"The texture slot index (0 indexed)","name":"index","type":["number"]},{"description":"The texture to set in the slot","name":"texture","type":["RageTexture"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureRotate":{"args":[{"description":"The texture slot (0 indexed)","name":"index","type":["number"]},{"description":"The rotation to apply, in degrees","name":"rotation","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureScale":{"args":[{"description":"The texture slot (0 indexed)","name":"index","type":["number"]},{"description":"The scale to apply","name":"scale","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureScaleX":{"args":[{"description":"The texture slot (0 indexed)","name":"index","type":["number"]},{"description":"The X scale to apply","name":"x","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureScaleY":{"args":[{"description":"The texture slot (0 indexed)","name":"index","type":["number"]},{"description":"The Y scale to apply","name":"y","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureTranslateX":{"args":[{"description":"The texture slot (0 indexed)","name":"index","type":["number"]},{"description":"The X translation to apply, in pixels","name":"x","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTextureTranslateY":{"args":[{"description":"The texture slot (0 indexed)","name":"index","type":["number"]},{"description":"The Y translation to apply, in pixels","name":"y","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetUseZBuffer":{"args":[{"description":"Whether the depth buffer should be used","name":"enable","type":["boolean"]}],"description":"\nThis defaults to ``true`` in an ``FGCHANGES`` and ``BETTERBGCHANGES`` layer, and ``false`` in a ``BGCHANGES`` layer.\n\n|since_notitg_v1|\n\n","returns":["void"]},"animateone":{"args":[{"description":"Whether animation should be enabled","name":"enable","type":["boolean"]},{"description":"The texture index (0 indexed)","name":"index","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"inherits":"Actor","playanimation":{"args":[{"description":"The animation name","name":"name","type":["string"]},{"description":"The playback speed","name":"rate","type":["number"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]},"playanimationframe":{"args":[{"description":"The animation name","name":"name","type":["string"]},{"description":"The playback speed","name":"rate","type":["number"]},{"description":"Frame?","name":"frame","type":["number"]}],"description":"\n|since_notitg_v2|\n\n","returns":["void"]},"setstate":{"args":[{"description":"The frame to show (0 indexed)","name":"state","type":["number"]}],"description":"\nOverridden from :lua:meth:`Actor.setstate`\n\n|since_itg|\n\n","returns":["void"]},"setstateone":{"args":[{"description":"The frame to show (0 indexed)","name":"state","type":["number"]},{"description":"The texture index (0 indexed)","name":"index","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]}},"NoteSkinManager":{"GetNoteSkinNames":{"description":"\n|since_itg|\n","returns":["array"]},"GetPath":{"args":[{"description":"The button","name":"button","type":["string"]},{"description":"The element","name":"element","type":["string"]}],"description":"\nSince |notitg_v4_2_0|, this returns the theme's missing graphic if a noteskin element can't be found (instead of\ncrashing).\n\n|since_itg|\n\n","returns":["string"]}},"Player":{"ClearArrowPathShader":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"ClearArrowShader":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"ClearHiddenRegions":{"description":"\n|since_notitg_v4|\n","returns":["void"]},"ClearHoldShader":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"ClearNoteTypeMults":{"description":"\n|since_notitg_v4|\n","returns":["void"]},"ClearReceptorShader":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"DidHoldNote":{"args":[{"description":"The column to flash (0 indexed)","name":"column","type":["number"]},{"description":"unknown","name":"unk","type":["boolean","nil"]}],"description":"\nThis generates a receptor flash\n\n|since_notitg_v3|\n\n","returns":["void"]},"DidTapNote":{"args":[{"description":"The column to flash (0 indexed)","name":"column","type":["number"]},{"description":"The judgment","name":"judgment","type":["number"]},{"description":"unknown","name":"unk","type":["boolean","nil"]}],"description":"\nThis generates a receptor flash\n\nJudgment values\n\n``1``: Fantastic\n\n``2``: Excellent\n\n``3``: Great\n\n``4``: Decent\n\n``5``: Way off\n\n``8``: Mine hit\n\n|since_notitg_v3|\n\n","returns":["void"]},"FakeSetPressed":{"args":[{"description":"The column","name":"column","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"FakeStep":{"args":[{"description":"The column to press","name":"column","type":["number"]}],"description":"\nThis makes the receptor play its pressed animation\n\n|since_notitg_v3|\n\n","returns":["void"]},"GetArrowPathShader":{"description":"\nWill return ``nil`` if no custom shader has been set\n\n|since_notitg_v3|\n","returns":["RageShaderProgram","nil"]},"GetArrowShader":{"description":"\nWill return ``nil`` if no custom shader has been set\n\n|since_notitg_v3|\n","returns":["RageShaderProgram","nil"]},"GetCMod":{"description":"\nWill return a value even if the player isn't using CMod\n\n|since_notitg_v3|\n","returns":["number"]},"GetCombo":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetHoldShader":{"description":"\nWill return ``nil`` if no custom shader has been set\n\n|since_notitg_v3|\n","returns":["RageShaderProgram","nil"]},"GetMissCombo":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetNoteData":{"args":[{"description":"The start beat number (can be ``nil`` if you want to fetch *all* note data)","name":"startBeat","type":["number","nil"]},{"description":"The end beat number (can be ``nil`` if you want to fetch *all* note data)","name":"endBeat","type":["number","nil"]}],"description":"\nSee :ref:`note_data_format`\n\n|since_notitg_v3_1|\n\n","returns":["array"]},"GetNoteDataTime":{"description":"\n|since_notitg_v3|\n","returns":["array"]},"GetNumTapsInRange":{"args":[{"description":"The start beat","name":"startBeat","type":["number"]},{"description":"The end beat","name":"endBeat","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["number"]},"GetReceptorShader":{"description":"\nWill return ``nil`` if no custom shader has been set\n\n|since_notitg_v3|\n","returns":["RageShaderProgram","nil"]},"GetSpeedMod":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetXMod":{"description":"\nWill return a value even if the player isn't using XMod\n\n|since_notitg_v3|\n","returns":["number"]},"IsAwake":{"description":"\n|since_notitg_v3|\n","returns":["boolean"]},"IsUsingCMod":{"description":"\n|since_notitg_v3|\n","returns":["boolean"]},"IsUsingReverse":{"description":"\nThis just checks the reverse state of column 0\n\n|since_notitg_v4_2_0|\n","returns":["boolean"]},"NoClearSplines":{"args":[{"description":"``true`` to prevent spline clearing when mods are cleared, ``false`` to let mod clearing also reset splines","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"PushNoteData":{"args":[{"description":"The global variable to store note data in","name":"varName","type":["string"]},{"description":"The start beat number (can be ``nil`` if you want to fetch *all* note data)","name":"startBeat","type":["number","nil"]},{"description":"The end beat number (can be ``nil`` if you want to fetch *all* note data)","name":"endBeat","type":["number","nil"]}],"description":"\nPrefer :lua:meth:`Player.GetNoteData` over this\n\nSee :ref:`note_data_format`\n\n|since_notitg_v3|\n\n","returns":["void"]},"PushNoteDataTime":{"args":[{"description":"The global variable to store note data in","name":"varName","type":["string"]},{"description":"The start beat number (can be ``nil`` if you want to fetch *all* note data)","name":"startBeat","type":["number","nil"]},{"description":"The end beat number (can be ``nil`` if you want to fetch *all* note data)","name":"endBeat","type":["number","nil"]}],"description":"\nLike :lua:meth:`Player.PushNoteData`, but uses seconds instead of beats to measure time\n\n|since_notitg_v3|\n\n","returns":["void"]},"RealStep":{"args":[{"description":"The column to press","name":"column","type":["number"]}],"description":"\nThis also makes the receptor play its pressed animation\n\n|since_notitg_v3|\n\n","returns":["void"]},"ResetRotXSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetRotYSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetRotZSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetSizeSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetSkewSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetStealthSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetXSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetYSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ResetZSplines":{"args":[{"description":"The column to reset (0 indexed)","name":"column","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"SendJudgment":{"args":[{"description":"The judgment to send","name":"judgment","type":["number"]},{"description":"``true`` for an early judgment, ``false`` for a late judgment","name":"early","type":["boolean"]},{"description":"Optional judgment offset, in milliseconds","name":"offset","type":["number","nil"]},{"description":"Optional beat number","name":"beat","type":["number","nil"]}],"description":"\nJudgment numbers:\n\n``1``: Fantastic\n\n``2``: Excellent\n\n``3``: Great\n\n``4``: Decent\n\n``5``: Way off\n\n``6``: Miss\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetArrowGradientColor":{"args":[{"description":"The point index (0 indexed)","name":"point","type":["number"]},{"description":"The column (0 indexed)","name":"column","type":["number"]},{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetArrowGradientPoint":{"args":[{"description":"The point index (0 indexed)","name":"point","type":["number"]},{"description":"The column (0 indexed)","name":"column","type":["number"]},{"description":"How far away from the receptors the point should be (where ``1`` = the size of an arrow = ``64`` pixels)","name":"offset","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetArrowPathBlendMode":{"args":[{"description":"The new blend mode to set (``normal``, ``add``, ``subtract``, ``modulate``, ``copysrc``, ``alphamask``, ``alphaknockout``, ``alphamultiply``, ``weightedmultiply``, ``invertdest``, ``noeffect``)","name":"mode","type":["string"]}],"description":"\nDefault value is ``normal``\n\n|since_notitg_v3_1|\n\n","returns":["void"]},"SetArrowPathShader":{"args":[{"description":"The custom shader to set","name":"shader","type":["RageShaderProgram"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetArrowShader":{"args":[{"description":"The custom shader to set","name":"shader","type":["RageShaderProgram"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetAwake":{"args":[{"description":"Whether the playfield should be awkake or not","name":"enable","type":["boolean"]}],"description":"\nUseful for activating players 3 through 8\n\nReturns the same boolean that you passed to the function\n\n|since_notitg_v3|\n\n","returns":["boolean"]},"SetCombo":{"args":[{"description":"The new combo to set","name":"combo","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetHiddenRegions":{"args":[{"description":"A list of regions to hide","name":"regions","type":["array"]}],"description":"\nA hidden regions looks like ``{ startBeat, endBeat, column }``. If column is omitted, then the hidden region applies to all columns.\n\n|since_notitg_v4|\n\n","returns":["void"]},"SetHoldShader":{"args":[{"description":"The custom shader to set","name":"shader","type":["RageShaderProgram"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetInputPlayer":{"args":[{"description":"``0`` for player 1, ``1`` for player 2, ``>1`` for AutoPlay","name":"player","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetMineSound":{"args":[{"description":"The file path to mine sound file","name":"path","type":["string"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetMissCombo":{"args":[{"description":"The new miss combo to set","name":"combo","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetNoteData":{"args":[{"description":"Chart index? (0 indexed)","name":"chart","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetNoteDataFromLua":{"args":[{"description":"[table] See :ref:`note_data_format`","name":"noteData","type":["table"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetNoteTypeMults":{"args":[{"description":"A list of multiplier tables","name":"multipliers","type":["array"]}],"description":"\nA note time multiplier looks like ``{ startBeat, multiplier }``. All notes after ``startBeat`` will be multiplied by ``multiplier``.\n\n|since_notitg_v4|\n\n","returns":["void"]},"SetNumArrowGradientPoints":{"args":[{"description":"The column to apply it to (0 indexed)","name":"column","type":["number"]},{"description":"The number of points","name":"amount","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetNumPathGradientPoints":{"args":[{"description":"The column to apply it to (0 indexed)","name":"column","type":["number"]},{"description":"The number of points","name":"amount","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetNumStealthGradientPoints":{"args":[{"description":"The column to apply it to (0 indexed)","name":"column","type":["number"]},{"description":"The number of points","name":"amount","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetPathGradientColor":{"args":[{"description":"The point index (0 indexed)","name":"point","type":["number"]},{"description":"The column (0 indexed)","name":"column","type":["number"]},{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetPathGradientPoint":{"args":[{"description":"The point index (0 indexed)","name":"point","type":["number"]},{"description":"The column (0 indexed)","name":"column","type":["number"]},{"description":"How far away from the receptors the point should be (where ``1`` = the size of an arrow = ``64`` pixels)","name":"offset","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetPlayerController":{"args":[{"description":"The new controller to set (See :cpp:enum:`PlayerController`)","name":"controller","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetRandomVanishTransform":{"args":[{"description":"The turn mod to use","name":"mod","type":["string"]}],"description":"\nThe default is ``SuperShuffle``\n\n|since_notitg_v4_2_0|\n\n","returns":["void"]},"SetReceptorShader":{"args":[{"description":"The custom shader to set","name":"shader","type":["RageShaderProgram"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetRotXSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetRotYSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetRotZSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetSizeSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\nSize spline points work like the ``Mini`` modifier (A value of 100 makes the arrows half size, 200 makes then have zero size, negative values makes arrows bigger)\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetSkewSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetStealthGradientColor":{"args":[{"description":"The point index (0 indexed)","name":"point","type":["number"]},{"description":"The column (0 indexed)","name":"column","type":["number"]},{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetStealthGradientPoint":{"args":[{"description":"The point index (0 indexed)","name":"point","type":["number"]},{"description":"The column (0 indexed)","name":"column","type":["number"]},{"description":"How far away from the receptors the point should be (where ``1`` = the size of an arrow = ``64`` pixels)","name":"offset","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetStealthSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\nSize spline points work like the ``Stealth`` modifier\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetXSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetYSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetZSpline":{"args":[{"description":"The spline index (0 - 39)","name":"index","type":["number"]},{"description":"Which column to apply the spline to (0 indexed, pass -1 to apply the spline to all columns)","name":"column","type":["number"]},{"description":"What value the spline point should have","name":"value","type":["number"]},{"description":"How far away arrows will be when hitting the spline point (calculate a spline offset as ``beat_offset * 100 * xmod_speed``)","name":"offset","type":["number"]},{"description":"How quickly spline changes should take effect (-1 for instant)","name":"activationSpeed","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"inherits":"ActorFrame"},"PlayerStageStats":{"FullCombo":{"description":"\nReturns an int: ``0`` or ``1``\n\n|since_itg|\n","returns":["number"]},"GetActualDancePoints":{"description":" |since_itg| ","returns":{}},"GetCaloriesBurned":{"description":"\n|since_itg|\n","returns":["number"]},"GetCurPossibleDancePoints":{"description":"\nUseful to calculate subtractive score in lua\n\n|since_notitg_v4_2_0|\n","returns":["number"]},"GetCurrentCombo":{"description":"\n|since_itg|\n","returns":["number"]},"GetCurrentLife":{"description":"\n|since_itg|\n","returns":["number"]},"GetGrade":{"description":"\nSee :cpp:enum:`Grade`\n","returns":["number"]},"GetHoldNoteScores":{"args":[{"description":"The judgment - see :cpp:enum:`HoldNoteScore`","name":"holdNoteScore","type":["number"]}],"description":"\nReturns ``-1`` for an invalid ``tapNoteScore``\n\n|since_itg|\n\n","returns":["number"]},"GetHoldNoteScoresForPlayer":{"args":[{"description":"The player number (1 indexed)","name":"playerNumber","type":["number"]},{"description":"The judgment - see :cpp:enum:`HoldNoteScore`","name":"holdNoteScore","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetLifeRemainingSeconds":{"description":"\n|since_itg|\n","returns":["number"]},"GetMineRowVector":{"description":"\n|since_notitg_v3|\n","returns":["table"]},"GetNoteRowVector":{"description":"\n|since_notitg_v3|\n","returns":["array"]},"GetNoteSongVector":{"description":"\n|since_notitg_v3|\n","returns":["array"]},"GetOffsetVector":{"description":"\nPresumably returns a list of hit offsets for all notes, in milliseconds?\n\n|since_notitg_v3|\n","returns":["array"]},"GetPercentDancePoints":{"description":"\nThis is the percentage score you see on the evaluation screen after completing a song (In the Simply Love theme).\n\n|since_itg|\n","returns":["number"]},"GetPlayedSteps":{"description":" |since_itg| ","returns":{}},"GetPossibleDancePoints":{"description":" |since_itg| ","returns":{}},"GetPossibleSteps":{"description":" |since_itg| ","returns":{}},"GetScore":{"description":"\n|since_itg|\n","returns":["number"]},"GetSurvivalSeconds":{"description":"\n|since_itg|\n","returns":["number"]},"GetTapNoteScores":{"args":[{"description":"The judgment - see :cpp:enum:`TapNoteScore`","name":"tapNoteScore","type":["number"]}],"description":"\nReturns ``-1`` for an invalid ``tapNoteScore``\n\n|since_itg|\n\n","returns":["number"]},"GetTapNoteScoresForPlayer":{"args":[{"description":"The player number (1 indexed)","name":"playerNumber","type":["number"]},{"description":"The judgment - see :cpp:enum:`TapNoteScore`","name":"tapNoteScore","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"MaxCombo":{"description":"\n|since_itg|\n","returns":["number"]},"SetActualDancePoints":{"args":[{"description":"The new dance points value to set","name":"amount","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetCurrentCombo":{"args":[{"description":"The new combo to set","name":"combo","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetHoldNoteScores":{"args":[{"description":"The judgment - see :cpp:enum:`HoldNoteScore`","name":"holdNoteScore","type":["number"]},{"description":"The new number of judgments to set","name":"count","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["number"]},"SetHoldNoteScoresForPlayer":{"args":[{"description":"The player number (1 indexed)","name":"playerNumber","type":["number"]},{"description":"The judgment - see :cpp:enum:`HoldNoteScore`","name":"holdNoteScore","type":["number"]},{"description":"The new number of judgments to set","name":"count","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetPossibleDancePoints":{"args":[{"description":"The new possible dance points value to set","name":"amount","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetScore":{"args":[{"description":"The new score to set","name":"score","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetTapNoteScores":{"args":[{"description":"The judgment - see :cpp:enum:`TapNoteScore`","name":"tapNoteScore","type":["number"]},{"description":"The new number of judgments to set","name":"count","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["number"]},"SetTapNoteScoresForPlayer":{"args":[{"description":"The player number (1 indexed)","name":"playerNumber","type":["number"]},{"description":"The judgment - see :cpp:enum:`HoldNoteScore`","name":"tapNoteScore","type":["number"]},{"description":"The new number of judgments to set","name":"count","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]}},"Polygon":{"AddDrawSplit":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"GetNumVertices":{"description":"\n|since_notitg_unk|\n","returns":["number"]},"GetTexture":{"description":"\n|since_notitg_unk|\n","returns":["RageTexture"]},"GetVertexColor":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]}],"description":"\nThis function returns multiple values - use it as such:\n\n``local r, g, b, a = polygon:GetVertexColor(0)``\n\n|since_notitg_unk|\n\n","returns":["multiple"]},"GetVertexNormal":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]}],"description":"\nThis function returns multiple values - use it as such:\n\n``local x, y, z = polygon:GetVertexNormal(0)``\n\n|since_notitg_unk|\n\n","returns":["multiple"]},"GetVertexPosition":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]}],"description":"\nThis function returns multiple values - use it as such:\n\n``local x, y, z = polygon:GetVertexPosition(0)``\n\n|since_notitg_unk|\n\n","returns":["multiple"]},"GetVertexTexCoord":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]}],"description":"\nThis function returns multiple values - use it as such:\n\n``local u, v, w = polygon:GetVertexTexCoord(0)``\n\n|since_notitg_unk|\n\n","returns":["multiple"]},"SetDrawMode":{"args":[{"description":"The draw mode (``triangles`` or ``quads`` or ``quadstrip`` or ``fan`` or ``strip`` or ``linestrip``)","name":"mode","type":["string"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetLineWidth":{"args":[{"description":"The line width","name":"width","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetNumVertices":{"args":[{"description":"The number of vertices","name":"count","type":["number"]}],"description":"\nDo this before manipulating other vertices\n\n|since_notitg_unk|\n\n","returns":["void"]},"SetPolygonMode":{"args":[{"description":"The new mode to set - see :cpp:enum:`PolygonMode`","name":"mode","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetTexture":{"args":[{"description":"the texture to set","name":"texture","type":["RageTexture"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetVertexAlpha":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]},{"description":"The alpha value","name":"a","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetVertexColor":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]},{"description":"The red value","name":"r","type":["number"]},{"description":"The green value","name":"g","type":["number"]},{"description":"The blue value","name":"b","type":["number"]},{"description":"The alpha value","name":"a","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetVertexNormal":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]},{"description":"The X component of the vertex's normal","name":"x","type":["number"]},{"description":"The Y component of the vertex's normal","name":"y","type":["number"]},{"description":"The Z component of the vertex's normal","name":"z","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetVertexPosition":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]},{"description":"The vertex's X position","name":"x","type":["number"]},{"description":"The vertex's Y position","name":"y","type":["number"]},{"description":"The vertex's Z position","name":"z","type":["number"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"SetVertexTexCoord":{"args":[{"description":"The vertex index (0 indexed)","name":"index","type":["number"]},{"description":"The U value (X position)","name":"u","type":["number"]},{"description":"The V value (Y position)","name":"v","type":["number"]},{"description":"The W value (Z position - irrelevant for 2D textures)","name":"w","type":["number","nil"]}],"description":"\n|since_notitg_unk|\n\n","returns":["void"]},"inherits":"Actor"},"PrefsManager":{"GetPreference":{"args":[{"description":"The preference to get","name":"pref","type":["string"]}],"description":"\nEg: ``local audio_offset = PREFSMAN:GetPreference('GlobalOffsetSeconds')``\n\n|since_itg|\n\n","returns":["any"]},"SetPreference":{"args":[{"description":"The preference to set","name":"pref","type":["string"]},{"description":"The new value to set","name":"value","type":["any"]}],"description":"\n|since_itg|\n\n","returns":["void"]}},"Profile":{"ClearHighScoresForCourse":{"args":[{"description":"The course","name":"course","type":["Course"]}],"description":"\n|since_notitg_v4_2_0|\n\n","returns":["void"]},"ClearHighScoresForCourseAndTrail":{"args":[{"description":"The course","name":"course","type":["Course"]},{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_notitg_v4_2_0|\n\n","returns":["void"]},"ClearHighScoresForSong":{"args":[{"description":"The song name","name":"song","type":["string"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"ClearHighScoresForSongAndSteps":{"args":[{"description":"The song name","name":"song","type":["string"]},{"description":"The steps difficulty - see :cpp:enum:`Difficulty`","name":"steps","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"GetCaloriesBurnedToday":{"description":"\n|since_itg|\n","returns":["number"]},"GetCoursesActual":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetCoursesPercentComplete":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetCoursesPossible":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetGoalCalories":{"description":"\n|since_itg|\n","returns":["number"]},"GetGoalSeconds":{"description":"\n|since_itg|\n","returns":["number"]},"GetGoalType":{"description":"\nSee :cpp:enum:`GoalType`\n\n|since_itg|\n","returns":["number"]},"GetHighScoreForCourseAndTrail":{"args":[{"description":"The course","name":"course","type":["Course"]},{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_notitg_v4_2_0|\n\n","returns":["HighScore"]},"GetHighScoreForSongAndSteps":{"args":[{"description":"The song name","name":"song","type":["string"]},{"description":"The steps difficulty - see :cpp:enum:`Difficulty`","name":"steps","type":["number"]}],"description":"\n|since_notitg_v3_1|\n\n","returns":["void"]},"GetSaved":{"description":"\nScripts can persist data (Eg: Highscores in minigames) by writing to this table.\n\nExample usage:\n\n.. code-block:: lua\n\nlocal new_score = 9001\n\nlocal profile_saved = PROFILEMAN:GetMachineProfile():GetSaved()\n\nIf there was no saved data before, or we got a better score than the previous highscore, save it\nif\nprofile_saved.yourname_yoursong_highscore == nil or\nprofile_saved.yourname_yoursong_highscore < new_score\nthen\nprofile_saved.yourname_yoursong_highscore = new_score\nend\n\nNote that the names of keys in this table have to be shared between all charts a user may have installed. It's\nsuggested to prefix key names with a unique identifier, such as your name/the name of the song you're modding. You\ncan also nest tables inside the `GetSaved()` table, if you want to organize.\n\n|since_itg|\n","returns":["table"]},"GetSongNumTimesPlayed":{"args":[{"description":"The song","name":"song","type":["Song"]}],"description":"\n|since_notitg_v1|\n\n","returns":["number"]},"GetSongsActual":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetSongsPercentComplete":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetSongsPossible":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetTotalNumSongsPlayed":{"description":"\n|since_itg|\n","returns":["number"]},"GetTotalStepsWithTopGrade":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]},{"description":"The grade - see :cpp:enum:`Grade`","name":"grade","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetTotalTrailsWithTopGrade":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]},{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]},{"description":"The grade - see :cpp:enum:`Grade`","name":"grade","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["number"]},"GetWeightPounds":{"description":"\n|since_itg|\n","returns":["number"]},"IsCodeUnlocked":{"args":[{"description":"The song ID","name":"id","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"SetGoalCalories":{"args":[{"description":"new goal to set, in calories","name":"seconds","type":["The"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetGoalSeconds":{"args":[{"description":"new goal to set, in seconds","name":"seconds","type":["The"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetGoalType":{"args":[{"description":"The goal type - see :cpp:enum:`GoalType`","name":"goalType","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetWeightPounds":{"args":[{"description":"The new weight to set, in pounds","name":"pounds","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]}},"ProfileManager":{"GetMachineProfile":{"description":"\n|since_itg|\n","returns":["Profile"]},"GetProfile":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["Profile"]},"IsPersistentProfile":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"SaveMachineProfile":{"description":"\n|since_itg|\n","returns":["void"]}},"RadarValues":{"GetValue":{"args":[{"description":"The radar category to get a value for - see :cpp:enum:`RadarCategory`","name":"category","type":["number"]}],"description":"\n|since_itg|\n","returns":{}}},"RageDisplay":{"ChangeCentering":{"args":[{"description":"The X offset","name":"translateX","type":["number"]},{"description":"The Y offset","name":"translateY","type":["number"]},{"description":"The width to add","name":"addX","type":["number"]},{"description":"The height to add","name":"addY","type":["number"]}],"description":"\n|since_notitg_v1|\n","returns":{}},"ClearShaderFuck":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"GetCumFPS":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetDesktopHeight":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetDesktopWidth":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetDisplayHeight":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetDisplayWidth":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetFPS":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetVPF":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetVendor":{"description":"\n|since_notitg_v2|\n","returns":["string"]},"GetWindowHeight":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetWindowWidth":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetWindowX":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetWindowY":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetWindowZoomX":{"description":"\nNote: one unit represents the theme's height\n\n|since_notitg_v3|\n","returns":["number"]},"GetWindowZoomY":{"description":"\nNote: one unit represents the theme's height\n\n|since_notitg_v3|\n","returns":["number"]},"SetBorderless":{"args":[{"description":"Whether the window should have a border","name":"enable","type":["boolean"]}],"description":"\nThis will reset at the end of a song, ``F3 + 8`` will also reset it.\n\n|since_notitg_v4_2_0|\n\n","returns":["void"]},"SetWindow":{"args":[{"description":"The center X position, in pixels","name":"xPos","type":["number"]},{"description":"The center Y position, in pixels","name":"yPos","type":["number"]},{"description":"The window X scale (Where one unit is the theme's width - which is typically 640)","name":"xZoom","type":["number"]},{"description":"The window Y scale (Where one unit is the theme's height)","name":"yZoom","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowAddX":{"args":[{"description":"The horizontal offset to add, in pixels","name":"x","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowAddY":{"args":[{"description":"The vertical offset to add, in pixels","name":"y","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowHeight":{"args":[{"description":"The new height, in pixels","name":"height","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowPosition":{"args":[{"description":"The X position, in pixels","name":"x","type":["number"]},{"description":"the Y position, in pixels","name":"y","type":["number"]}],"description":"\nAlso seems to reset the window size and hide window borders for whatever reason?\n\nSince |notitg_v4_2_0|, this now accounts for window borders.\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowPositionAndSize":{"args":[{"description":"The X position, in pixels","name":"x","type":["number"]},{"description":"the Y position, in pixels","name":"y","type":["number"]},{"description":"The window width, in pixels","name":"w","type":["number"]},{"description":"the window height, in pixels","name":"h","type":["number"]}],"description":"\nSince |notitg_v4_2_0|, this now accounts for window borders.\n\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowWidth":{"args":[{"description":"The new width, in pixels","name":"width","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowX":{"args":[{"description":"The new X position to set","name":"x","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowY":{"args":[{"description":"The new Y position to set","name":"y","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowZoom":{"args":[{"description":"The window X scale (Where one unit is the theme's width - which is typically 640)","name":"xZoom","type":["number"]},{"description":"The window Y scale (Where one unit is the theme's height)","name":"yZoom","type":["number"]}],"description":"\n|since_notitg_v4_2_0|\n\n\n","returns":["void"]},"SetWindowZoomX":{"args":[{"description":"The window X scale (Where one unit is the theme's width - which is typically 640)","name":"xZoom","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetWindowZoomY":{"args":[{"description":"The window Y scale (Where one unit is the theme's height)","name":"yZoom","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"ShaderFuck":{"args":[{"description":"The shader program to apply","name":"shader","type":["RageShaderProgram"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]}},"RageFileManager":{"LuaLoadFile":{"args":[{"description":"Presumably a path to a Lua file to load","name":"path","type":["string"]}],"description":"(Doesn't work, it returns the function itself and the string)\n\n|since_notitg_v3_1|\n\nThis function returns two values, a function, and a string\n\n","returns":["multiple"]}},"RageInput":{"GetDescriptions":{"description":"\nEg: ``{ \"Wine Keyboard\", \"Win32_MIDI\", \"MonkeyKeyboard\" }``\n\n|since_itg|\n","returns":["array"]},"Reset":{"description":"\n|since_notitg_v1|\n","returns":["void"]}},"RageShaderProgram":{"clearDefine":{"args":[{"description":"The name of the macro to remove","name":"key","type":["string"]}],"description":"\nThis does not automatically recompile/relink the shader program - use :lua:meth:`RageShaderProgram.compileImmediate` to do that.\n\n|since_notitg_v4|\n\n","returns":["void"]},"compile":{"args":[{"description":"The vertex shader code to compile, or an empty string to use NotITG's default vertex shader","name":"vertCode","type":["string"]},{"description":"The fragment shader code to compile, or an empty string to use NotITG's default fragment shader","name":"fragCode","type":["string"]}],"description":"\nThis will use defines specified with :lua:meth:`RageShaderProgram.define`.\n\n|since_notitg_v3|\n\n","returns":["void"]},"compileImmediate":{"description":"\nUseful in conjunction with :lua:meth:`RageShaderProgram.define` or :lua:meth:`RageShaderProgram.clearDefine`, since those functions do not automatically recompile/relink the shader program.\n\nDespite being named ``compileImmediate``, this may not compile a shader immediately, but rather may defer compilation to when the shader is first used.\n\n|since_notitg_v4|\n","returns":["void"]},"define":{"args":[{"description":"The name of the macro to define","name":"key","type":["string"]},{"description":"What to define the macro as","name":"value","type":["string","boolean","number","nil"]}],"description":"\nSince |notitg_v4_2_0|, this now functions with shader code that contains ``#version`` directives.\n\nThis does not automatically recompile/relink the shader program - use :lua:meth:`RageShaderProgram.compileImmediate` to do that.\n\n|since_notitg_v4|\n\n","returns":["void"]},"uniform1f":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The value to set on the uniform","name":"value","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"uniform1fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 1 element, or any multiple of 1 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniform1i":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The value to set on uniform","name":"value","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"uniform1iv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 1 element, or any multiple of 1 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniform2f":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The X value to set on the uniform","name":"x","type":["number"]},{"description":"The Y value to set on the uniform","name":"y","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"uniform2fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 2 elements, or any multiple of 2 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniform3f":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The X value to set on the uniform","name":"x","type":["number"]},{"description":"The Y value to set on the uniform","name":"y","type":["number"]},{"description":"The Z value to set on the uniform","name":"z","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"uniform3fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 3 elements, or any multiple of 3 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniform4f":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The X value to set on the uniform","name":"x","type":["number"]},{"description":"The Y value to set on the uniform","name":"y","type":["number"]},{"description":"The Z value to set on the uniform","name":"z","type":["number"]},{"description":"The W value to set on the uniform","name":"w","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"uniform4fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 4 elements, or any multiple of 4 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniformMatrix2fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 4 elements, or any multiple of 4 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniformMatrix3fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 9 elements, or any multiple of 9 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniformMatrix4fv":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The values to set (This should be a table with 16 elements, or any multiple of 16 for setting arrays)","name":"values","type":["table"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"uniformTexture":{"args":[{"description":"The name of the uniform to set","name":"uniformName","type":["string"]},{"description":"The texture to set on the sampler","name":"texture","type":["RageTexture"]}],"description":"\nA :lua:class:`RageTexture` object is obtainable with ``:GetTexture()`` on another actor. You may have to create a \"texture provider\" actor to if you don't have any other actors that use your desired texture: that is, a simple sprite actor that does nothing and remains hidden throughout the entire duration of the chart.\n\n|since_notitg_v3|\n\n","returns":["void"]}},"RageSound":{"GetLengthSeconds":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetPan":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetSoundPosition":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetStartSecond":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"GetStopMode":{"description":"\n|since_notitg_v3|\n","returns":["string"]},"GetVolume":{"description":"\n|since_notitg_v3|\n","returns":["number"]},"IsPaused":{"description":"\n|since_notitg_v3|\n","returns":["boolean"]},"IsPlaying":{"description":"\nWill still return true even if the sound is paused\n\n|since_notitg_v3|\n","returns":["boolean"]},"Load":{"args":[{"description":"The filepath of the new sound file to load","name":"path","type":["string"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"Pause":{"args":[{"description":"``true`` to pause, ``false`` to unpause","name":"enable","type":["boolean"]}],"description":"\nOverridden from :lua:meth:`Actor.pause`\n\n|since_notitg_v3|\n\n","returns":["void"]},"Play":{"description":"\nIf you want to resume a paused sound, use :lua:meth:`RageSound.Pause`\n\n|since_notitg_v3|\n","returns":["void"]},"SetParam":{"args":[{"description":"The parameter to set (``StartSecond``, ``Pitch``, ``Speed``, ``Pan``, ``Volume``)","name":"param","type":["string"]},{"description":"The value to assign","name":"value","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetSoundPosition":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"Stop":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"pan":{"args":[{"description":"The new panning to apply (0 = left, 0.5 = center, 1 = right)","name":"balance","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"pitch":{"args":[{"description":"The new speed to apply (0 - 100)","name":"speed","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"speed":{"args":[{"description":"The new speed to apply (0 - 100)","name":"speed","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"startsecond":{"args":[{"description":"The new start point, in seconds","name":"start","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"stopmode":{"args":[{"description":"The new stop mode to set (``stop``, ``loop``, ``continue``, ``auto``)","name":"mode","type":["string"]}],"description":"\nA stop mode of ``auto`` will reset it to the default\n\n|since_notitg_v3|\n\n","returns":["void"]},"volume":{"args":[{"description":"The new volume to set (0 - 1)","name":"volume","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]}},"RageTexture":{"GetImageHeight":{"description":"\nFor example, a 1920x1080 image will return 1080, despite the texture padding the height out to 2048\n\n|since_notitg_v1|\n","returns":["number"]},"GetImageWidth":{"description":"\nFor example, a 1920x1080 image will return 1920, despite the texture padding the width out to 2048\n\n|since_notitg_v1|\n","returns":["number"]},"GetNumFrames":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetPath":{"description":"\nNote that not all texture originate from a valid path. For example, a texture created by an :lua:class:`ActorFrameTexture` has a path like ``ActorFrameTexture 2``.\n\n|since_notitg_v1|\n","returns":["string"]},"GetSourceHeight":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetSourceWidth":{"description":"\n|since_notitg_v1|\n","returns":["number"]},"GetTextureCoordRect":{"args":[{"description":"The frame number to fetch the rect for (0 indexed)","name":"frame","type":["number"]}],"description":"\nThis function returns multiple values - use it as such:\n\n``local left, top, right, bottom = texture:GetTextureCoordRect(0)``\n\n|since_notitg_v1|\n\n","returns":["multiple"]},"GetTextureHeight":{"description":"\nThis will always be a power-of-two. For example, an image with a size of 1920x1080 will be loaded into a 2048x2048 texture\n\n|since_notitg_v1|\n","returns":["number"]},"GetTextureWidth":{"description":"\nThis will always be a power-of-two. For example, an image with a size of 1920x1080 will be loaded into a 2048x2048 texture\n\n|since_notitg_v1|\n","returns":["number"]},"Reload":{"description":"\nReturns a function - not sure why, but calling it seems to cause a crash (access violation)\n\n|since_notitg_v1|\n","returns":["function"]},"loop":{"args":[{"description":"``true`` to loop the animation, ``false`` to not loop","name":"enable","type":["boolean"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"position":{"args":[{"description":"The new playback positon to set","name":"position","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"rate":{"args":[{"description":"The playback rate to set","name":"rate","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]}},"RageTextureRenderTarget":{"BeginRenderingTo":{"args":[{"description":"Whether the currently stored texture should be preserved (not cleared) before rendering","name":"preserveTexture","type":["boolean"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"FinishRenderingTo":{"description":"\n|since_notitg_v1|\n","returns":["void"]},"inherits":"RageTexture"},"ScreenGameplay":{"GetLife":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\nThis is a value between 0 - 1\n\n|since_notitg_v1|\n\n","returns":["number"]},"PauseGame":{"args":[{"description":"``true`` to pause, ``false`` to unpause","name":"pause","type":["boolean"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"SetLife":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]},{"description":"The new life percentage to set (0 - 1)","name":"life","type":["number"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"inherits":"ActorFrame"},"ScreenManager":{"GetOverlayScreens":{"description":"\n|since_notitg_v4|\n","returns":["array"]},"GetSharedBGA":{"description":"\n|since_notitg_v4|\n","returns":["ActorFrame"]},"GetTopScreen":{"description":"\nEg: This will give you a :lua:class:`ScreenGameplay` instance if called during gameplay\n\n|since_itg|\n","returns":["Actor"]},"HideOverlayMessage":{"description":"\n|since_itg|\n","returns":["void"]},"OverlayMessage":{"args":[{"description":"The message to show","name":"message","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetInputMode":{"args":[{"description":"``0`` for all screens, ``1`` for only overlay screens, ``2`` for no screens","name":"mode","type":["number"]}],"description":"\n|since_notitg_v4|\n\n","returns":["void"]},"SetNewScreen":{"args":[{"description":"The name of the screen to switch to","name":"screenName","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SystemMessage":{"args":[{"description":"The message to show","name":"message","type":["string"]}],"description":"\nUseful for debugging!\n\n|since_itg|\n\n","returns":["void"]},"SystemMessageNoAnimate":{"args":[{"description":"The message to show","name":"message","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]}},"Song":{"AddLabel":{"args":[{"description":"The beat of the label","name":"beat","type":["number"]},{"description":"The name of the label","name":"name","type":["string"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"ClearLabels":{"description":"\n|since_notitg_v3|\n","returns":["void"]},"GetAllSteps":{"description":"\n|since_itg|\n","returns":["array"]},"GetBackgroundPath":{"description":"\nCan return ``nil`` if the song has no background image\n\n|since_itg|\n","returns":["string","nil"]},"GetBannerPath":{"description":"\nCan return ``nil`` if the song has no banner image\n\n|since_itg|\n","returns":["string","nil"]},"GetBeatFromElapsedTime":{"args":[{"description":"The second to get a beat number for","name":"seconds","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["number"]},"GetDisplayArtist":{"description":"\n|since_itg|\n","returns":["string"]},"GetDisplayFullTitle":{"description":"\n|since_itg|\n","returns":["string"]},"GetDisplayMainTitle":{"description":"\n|since_itg|\n","returns":["string"]},"GetDisplaySubTitle":{"description":"\nReturns an empty string is no subtitle is set\n\n|since_itg|\n","returns":["string"]},"GetElapsedTimeFromBeat":{"args":[{"description":"The beat to get a seconds number for","name":"beat","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["number"]},"GetGenre":{"description":"\n|since_itg|\n","returns":["string"]},"GetGroupName":{"description":"\n|since_itg|\n","returns":["string"]},"GetLabels":{"description":"\n|since_notitg_v3|\n","returns":["table"]},"GetMaxBPM":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetMinBPM":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetMusicPath":{"description":"\n|since_notitg_v4|\n","returns":["string"]},"GetNoteData":{"args":[{"description":"The steps to fetch note data from","name":"steps","type":["Steps"]},{"description":"If ``true``, the returned note data will use seconds as the time measurement unit","name":"useSeconds","type":["boolean","nil"]},{"description":"The start beat number (can be ``nil`` if you want to fetch *all* note data)","name":"startBeat","type":["number","nil"]},{"description":"The end beat number (can be ``nil`` if you want to fetch *all* note data)","name":"endBeat","type":["number","nil"]}],"description":"\nSee :ref:`note_data_format`\n\n|since_notitg_v4|\n\n","returns":["array"]},"GetSampleLengthSeconds":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetSampleStartSeconds":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"GetSongDir":{"description":"\n|since_itg|\n","returns":["string"]},"GetSpellCards":{"description":"\nSee :ref:`spell_card_format`\n\n|since_notitg_v3|\n","returns":["array"]},"GetStepsByStepsType":{"args":[{"description":"The steps type - see :cpp:enum:`StepsType`","name":"stepsType","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["array"]},"GetTimingData":{"description":"\nReturns 2 lists of tables - the first one has the format ``{ beat, newBpm }``, the second one has the format ``{ beat, stopDuration }``\n\n``local beat_data, stop_data = song:GetTimingData()``\n\n|since_notitg_v4_0_1|\n","returns":["multiple"]},"GetTranslitArtist":{"description":"\n|since_itg|\n","returns":["string"]},"GetTranslitFullTitle":{"description":"\nReturns an empty string is no subtitle is set\n\n|since_itg|\n","returns":["string"]},"GetTranslitMainTitle":{"description":"\n|since_itg|\n","returns":["string"]},"GetTranslitSubTitle":{"description":"\nReturns an empty string is no subtitle is set\n\n|since_itg|\n","returns":["string"]},"GetUnlockMethod":{"args":[{"description":"The step difficulty (see :cpp:enum:`Difficulty`)","name":"difficulty","type":["number"]}],"description":"\nReturns an empty string if the steps do not exist, or if there is no unlock file\n\n|since_notitg_v4|\n\n","returns":["string"]},"IsCustomSong":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsLong":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsMarathon":{"description":"\n|since_itg|\n","returns":["boolean"]},"MusicLengthSeconds":{"description":"\n|since_itg|\n","returns":["number"]},"SetNumSpellCards":{"args":[{"description":"The number of spell cards","name":"count","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetSpellCardColor":{"args":[{"description":"The spell card index (0 indexed)","name":"index","type":["number"]},{"description":"The red value (0 - 1)","name":"r","type":["number"]},{"description":"The green value (0 - 1)","name":"g","type":["number"]},{"description":"The blue value (0 - 1)","name":"b","type":["number"]},{"description":"The alpha value (0 - 1)","name":"a","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetSpellCardDifficulty":{"args":[{"description":"The spell card index (0 indexed)","name":"index","type":["number"]},{"description":"The difficulty rating to set","name":"difficulty","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetSpellCardName":{"args":[{"description":"The spell card index (0 indexed)","name":"index","type":["number"]},{"description":"The new spell card name","name":"name","type":["string"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"SetSpellCardTiming":{"args":[{"description":"The spell card index (0 indexed)","name":"index","type":["number"]},{"description":"The beat to start the spell card","name":"startBeat","type":["number"]},{"description":"The beat to end the spell card","name":"endBeat","type":["number"]}],"description":"\n|since_notitg_v3|\n\n","returns":["void"]},"StepsLengthSeconds":{"description":"\n|since_notitg_v3|\n","returns":["number"]}},"SongManager":{"FindCourse":{"args":[{"description":"The course name to locate","name":"name","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["Song","nil"]},"FindSong":{"args":[{"description":"The song name to locate","name":"name","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["Song","nil"]},"GetAllCourses":{"args":[{"description":"Whether to include auto-generated courses","name":"includeAutogen","type":["boolean"]}],"description":"\n|since_itg|\n\n","returns":["array"]},"GetAllSongs":{"description":"\n|since_itg|\n","returns":["array"]},"GetRandomCourse":{"description":"\n|since_itg|\n","returns":["Course"]},"GetRandomSong":{"description":"\n|since_itg|\n","returns":["Song"]}},"Sprite":{"GetNumStates":{"description":"\n|since_notitg_v4_2_0|\n","returns":["number"]},"GetTexture":{"description":"\n|since_notitg_v1|\n","returns":["RageTexture"]},"Load":{"args":[{"description":"The texture path to load, or ``nil`` to unload","name":"path","type":["string","nil"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"LoadBackground":{"args":[{"description":"The texture path to load","name":"path","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"LoadBanner":{"args":[{"description":"The texture path to load","name":"path","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"SetTexture":{"args":[{"description":"The new texture to set","name":"texture","type":["RageTexture"]}],"description":"\n|since_notitg_v1|\n\n","returns":["void"]},"customtexturerect":{"args":[{"description":"The left coordinate of the rectangle","name":"left","type":["number"]},{"description":"The left coordinate of the rectangle","name":"top","type":["number"]},{"description":"The right coordinate of the rectangle","name":"right","type":["number"]},{"description":"The bottom coordinate of the rectangle","name":"bottom","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"getstate":{"description":"\n|since_notitg_v4|\n","returns":["number"]},"inherits":"Actor","loop":{"args":[{"description":"``true`` to loop the animation, ``false`` to have a play-once animation","name":"enable","type":["boolean"]}],"description":"\nThis is an alias for :lua:meth:`RageTexture.loop`\n\n|since_itg|\n\n","returns":["void"]},"looppoint":{"args":[{"description":"The new loop point to set","name":"point","type":["number"]}],"description":"\nThis can be used to make multiple-state animations using a single spritesheet - such as having a run cycle set the loop point when starting/stopping a run.\n\n|since_notitg_v4|\n\n","returns":["void"]},"rate":{"args":[{"description":"The new playback rate to set (0 - 1)","name":"rate","type":["number"]}],"description":"\nThis is an alias for :lua:meth:`RageTexture.rate`\n\n|since_itg|\n\n","returns":["void"]},"scaletoclipped":{"args":[{"description":"The target width","name":"width","type":["number"]},{"description":"The height width","name":"height","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"stretchtexcoords":{"args":[{"description":"The X translation to apply","name":"x","type":["number"]},{"description":"The Y translation to apply","name":"y","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"texcoordvelocity":{"args":[{"description":"The X scroll speed to apply","name":"x","type":["number"]},{"description":"The Y scroll speed to apply","name":"y","type":["number"]}],"description":"\nA velocity of ``1`` means the texture will scroll entirely once per second - ``2`` makes it scroll twice per second, etc.\n\n|since_itg|\n\n","returns":["void"]}},"StageStats":{"GetGameplaySeconds":{"description":"\n|since_itg|\n","returns":["number"]},"GetPlayedSongs":{"description":"\n|since_notitg_v3|\n","returns":["array"]},"GetPlayerStageStats":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["PlayerStageStats"]},"GetPossibleSongs":{"description":"\n|since_notitg_v3|\n","returns":["array"]},"GetTotalPossibleStepsSeconds":{"description":"\n|since_notitg_v3|\n","returns":["number"]}},"StatsManager":{"GetAccumStageStats":{"description":"\n|since_itg|\n","returns":["StageStats"]},"GetBestGrade":{"description":"\nSee :cpp:enum:`Grade`\n\n|since_itg|\n","returns":["number"]},"GetCurStageStats":{"description":"\n|since_itg|\n","returns":["StageStats"]},"GetFinalGrade":{"args":[{"description":"The player number (0 indexed)","name":"playerNumber","type":["number"]}],"description":"\nSee :cpp:enum:`Grade`\n\n|since_itg|\n\n","returns":["number"]},"GetPlayedStageStats":{"args":[{"description":"The number of rounds to fetch","name":"rounds","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["StageStats","void"]},"GetStagesPlayed":{"description":"\n|since_itg|\n","returns":["number"]},"GetWorstGrade":{"description":"\nSee :cpp:enum:`Grade`\n\n|since_itg|\n","returns":["number"]},"Reset":{"description":"\n|since_itg|\n","returns":["void"]}},"Steps":{"GetDescription":{"description":"\n|since_itg|\n","returns":["string"]},"GetDifficulty":{"description":"\nSee :cpp:enum:`Difficulty`\n\n|since_itg|\n","returns":["number"]},"GetMeter":{"description":"\n|since_itg|\n","returns":["number"]},"GetRadarValues":{"description":"\n|since_itg|\n","returns":["RadarValues"]},"GetStepsType":{"description":"\nSee :cpp:enum:`StepsType`\n\n|since_itg|\n","returns":["number"]}},"ThemeManager":{"GetCurLanguage":{"description":"\nEg: ``english``\n\n|since_itg|\n","returns":["string"]},"GetCurThemeName":{"description":"\n|since_itg|\n","returns":["string"]},"GetMetric":{"args":[{"description":"The class to fetch a metric within","name":"class","type":["string"]},{"description":"The name of the metric within the class","name":"element","type":["string"]}],"description":"\nReturns an empty string in the metric doesn't exist\n\n|since_itg|\n\n","returns":["string"]},"GetPath":{"args":[{"description":"The type of the wanted element - see :cpp:enum:`ElementCategory`","name":"type","type":["number"]},{"description":"The class to use","name":"class","type":["string"]},{"description":"The element to find within the class","name":"element","type":["string"]}],"description":"\nReturns the ``_missing`` path if the element does not exist\n\n|since_itg|\n\n","returns":["string"]},"GetThemeNames":{"description":"\n|since_itg|\n","returns":["array"]}},"Trail":{"GetDifficulty":{"description":"\nSee :cpp:enum:`Difficulty`\n\n|since_itg|\n","returns":["number"]},"GetLengthSeconds":{"description":"\n|since_itg|\n","returns":["number"]},"GetRadarValues":{"description":"\n|since_itg|\n","returns":["RadarValues"]},"GetStepsType":{"description":"\nSee :cpp:enum:`StepsType`\n\n|since_notitg_v4_2_0|\n","returns":["number"]}},"UnlockManager":{"FindCode":{"args":[{"description":"The name","name":"name","type":["string"]}],"description":"\n|since_itg|\n\n","returns":["number","nil"]},"GetSongsUnlockedByCode":{"args":[{"description":"The unlock code","name":"unlockCode","type":["number"]}],"description":"\nReturns an empty table on an invalid code\n\n|since_itg|\n\n","returns":["table"]},"GetStepsUnlockedByCode":{"args":[{"description":"The unlock code","name":"unlockCode","type":["number"]}],"description":"\nReturns an empty table on an invalid code\n\n|since_itg|\n\n","returns":["table"]},"PreferUnlockCode":{"args":[{"description":"The unlock code","name":"unlockCode","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]},"UnlockCode":{"args":[{"description":"The unlock code","name":"unlockCode","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["void"]}}},"global":{"funcs":{"AllFailed":{"description":"\n|since_itg|\n","returns":["boolean"]},"ConnectToServer":{"description":"\nReturns a boolean depending on whether connection succeeded or not... apparently... even though trying to connect to\na non-existent server returns ``true`` before a system message appears saying connection failed.\n\n|since_itg|\n","returns":["boolean"]},"CourseDifficultyToThemedString":{"args":[{"description":"The course difficulty - see :cpp:enum:`CourseDifficulty`","name":"courseDifficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"CourseSongIndex":{"description":"\n|since_itg|\n","returns":["number"]},"CurStyleName":{"description":"\nEg: ``versus``\n\n|since_itg|\n","returns":["string"]},"DayOfMonth":{"description":"\n|since_itg|\n","returns":["number"]},"DayOfYear":{"description":"\n|since_itg|\n","returns":["number"]},"Debug":{"args":[{"description":"The message to log","name":"message","type":["string"]}],"description":"\nLike :lua:func:`global.global.Trace`, but shows even if the ``ShowLogOutput`` preference is disabled\n\nAlso returns ``true`` for whatever reason\n\n|since_itg|\n\n","returns":["boolean"]},"DifficultyToThemedString":{"args":[{"description":"The difficulty - see :cpp:enum:`Difficulty`","name":"difficulty","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"FormatPercentScore":{"args":[{"description":"The dance points score","name":"score","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"GetBestFinalGrade":{"description":"\n|since_itg|\n\nSee :cpp:enum:`Grade`\n","returns":["number"]},"GetDiskSpaceFree":{"description":"\nEg: ``12.51 GB``\n\n|since_itg|\n","returns":["string"]},"GetDiskSpaceTotal":{"description":"\nEg: ``786.44 GB``\n\n|since_itg|\n","returns":["string"]},"GetEasiestNotesDifficulty":{"description":"\nSee :cpp:enum:`Difficulty`\n\n|since_itg|\n","returns":["number"]},"GetGradeFromPercent":{"args":[{"description":"The percentage score","name":"percent","type":["number"]}],"description":"\nSee :cpp:enum:`Grade`\n\n|since_itg|\n\n","returns":["number"]},"GetIP":{"description":"\nEg: ``192.168.1.10, Netmask: 255.255.255.0`` - as tested on |notitg_v4_0_1| though, this function seems to return ``Not implemented``.\n\n|since_itg|\n","returns":["string"]},"GetInputType":{"description":"\n|since_itg|\n","returns":["string"]},"GetNumCrashLogs":{"description":"\n|since_itg|\n","returns":["number"]},"GetNumIOErrors":{"description":"\n|since_itg|\n","returns":["number"]},"GetNumMachineEdits":{"description":"\n|since_itg|\n","returns":["number"]},"GetNumMachineScores":{"description":"\nThis is an alias for :lua:meth:`GameState.GetNumPlayersEnabled`\n\n|since_itg|\n","returns":["number"]},"GetProductName":{"description":"\nEg: ``NotITG v4.0.1``\n\n|since_itg|\n","returns":["string"]},"GetProductVer":{"description":"\nEg: ``v4.0.1``\n\n|since_itg|\n","returns":["string"]},"GetRevision":{"description":"\n|since_itg|\n","returns":["number"]},"GetSerialNumber":{"description":"\n|since_itg|\n","returns":["string"]},"GetStageText":{"description":"\nEg: ``event``\n\n|since_itg|\n","returns":["string"]},"GetUptime":{"description":"\nReturns a ``HH:MM:SS`` string\n\n|since_itg|\n","returns":["string"]},"Grade":{"args":[{"description":"The grade name","name":"name","type":["string"]}],"description":"\nSee :cpp:enum:`Grade`\n\nEg: ``A`` -> ``3``, ``Tier04`` -> ``3``\n\n|since_itg|\n\n","returns":["number"]},"GradeToString":{"args":[{"description":"The grade","name":"grade","type":["number"]}],"description":"\nSee :cpp:enum:`Grade`\n\nUnfortunately, it's not a very useful string. For example, ``GradeToString(GRADE_TIER03)`` returns... ``Tier03``.\n\n|since_itg|\n\n","returns":["string"]},"Hour":{"description":"\n|since_itg|\n","returns":["number"]},"HubIsConnected":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsAnyPlayerUsingMemoryCard":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsExtraStage":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsExtraStage2":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsFinalStage":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsNetConnected":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsNetSMOnline":{"description":"\n|since_itg|\n","returns":["boolean"]},"IsSMOnlineLoggedIn":{"args":[{"description":"The player number (0 indexed)","name":"player","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"IsUsingMemoryCard":{"args":[{"description":"The player number (0 indexed)","name":"player","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["boolean"]},"Minute":{"description":"\n|since_itg|\n","returns":["number"]},"MonthOfMonth":{"description":"\n|since_itg|\n","returns":["number"]},"MonthToString":{"description":"\nReturns an empty string for an invalid month\n\nEg: ``1`` -> ``January``\n\n|since_itg|\n","returns":["string"]},"NumStagesLeft":{"description":"\nReturns ``999`` if event mode is enabled\n\n|since_itg|\n","returns":["number"]},"OnePassed":{"description":"\n|since_itg|\n","returns":["boolean"]},"PlayModeName":{"description":"\nEg: ``Regular``\n\n|since_itg|\n","returns":["string"]},"ReportStyle":{"description":"\n|since_itg|\n","returns":["boolean"]},"Second":{"description":"\n|since_itg|\n","returns":["number"]},"SecondsToMMSS":{"args":[{"description":"The number of seconds","name":"seconds","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"SecondsToMMSSMsMs":{"args":[{"description":"The number of seconds","name":"seconds","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"SecondsToMMSSMsMsMs":{"args":[{"description":"The number of seconds","name":"seconds","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"SecondsToMSSMsMs":{"args":[{"description":"The number of seconds","name":"seconds","type":["number"]}],"description":"\n|since_itg|\n\n","returns":["string"]},"Trace":{"args":[{"description":"The message to log","name":"message","type":["string"]}],"description":"\nAlso returns ``true`` for whatever reason\n\n|since_itg|\n\n","returns":["boolean"]},"Weekday":{"description":"\nThis assumes the week starts on a Sunday\n\n|since_itg|\n","returns":["number"]},"Year":{"description":"\n|since_itg|\n","returns":["number"]}},"vars":{"DISPLAY":{"description":"The :lua:class:`RageDisplay` singleton\n|since_notitg_v1|\n","type":"RageDisplay"},"DISPLAY_BOTTOM":{"description":"The bottommost coordinate of the monitor - equal to :lua:attr:`global.DISPLAY_HEIGHT`\n|since_itg|\n","type":"number"},"DISPLAY_CENTER_X":{"description":"The middle X coordinate of the monitor\nEqual to ``DISPLAY_WIDTH / 2``\n\n|since_itg|\n","type":"number"},"DISPLAY_CENTER_Y":{"description":"The middle Y coordinate of the monitor\nEqual to ``DISPLAY_HEIGHT / 2``\n\n|since_itg|\n","type":"number"},"DISPLAY_HEIGHT":{"description":"The monitor height\n|since_itg|\n","type":"number"},"DISPLAY_LEFT":{"description":"The leftmost coordinate of the monitor - always zero\n|since_itg|\n","type":"number"},"DISPLAY_RIGHT":{"description":"The rightmost coordinate of the monitor - equal to :lua:attr:`global.DISPLAY_WIDTH`\n|since_itg|\n","type":"number"},"DISPLAY_TOP":{"description":"The topmost coordinate of the monitor - always zero\n|since_itg|\n","type":"number"},"DISPLAY_WIDTH":{"description":"The monitor width\n|since_itg|\n","type":"number"},"FILEMAN":{"description":"The :lua:class:`RageFileManager` singleton\n|since_notitg_v3|\n","type":"RageFileManager"},"FUCK_EXE":{"description":"Equal to ``true``\n|since_notitg_v1|\n","type":"boolean"},"FUCK_VERSION_1":{"description":"Equal to ``20161226`` (The release date of |notitg_v1|)\n|since_notitg_v3| (yes really)\n","type":"number"},"FUCK_VERSION_2":{"description":"Equal to ``20170405`` (The release date of |notitg_v2|)\n|since_notitg_v3| (yes really)\n","type":"number"},"FUCK_VERSION_3":{"description":"Equal to ``20180609`` (The release date of |notitg_v3|)\n|since_notitg_v4| (yes really)\n","type":"number"},"FUCK_VERSION_3_1":{"description":"Equal to ``20180826`` (The release date of |notitg_v3_1|)\n|since_notitg_v4| (yes really)\n","type":"number"},"GAMESTATE":{"description":"The :lua:class:`GameState` singleton\n|since_itg|\n","type":"GameState"},"INPUTMAN":{"description":"The :lua:class:`RageInput` singleton\n|since_itg|\n","type":"RageInput"},"MEMCARDMAN":{"description":"The :lua:class:`MemoryCardManager` singleton\nDoesn't seem to exist when testing in |notitg_v4|?\n\n|since_itg|\n","type":"MemoryCardManager"},"MESSAGEMAN":{"description":"The :lua:class:`MessageManager` singleton\n|since_itg|\n","type":"MessageManager"},"NOTESKIN":{"description":"The :lua:class:`NoteSkinManager` singleton\n|since_itg|\n","type":"NoteSkinManager"},"OPENITG":{"description":"Equal to ``true``\n|since_itg|\n","type":"boolean"},"OPENITG_VERSION":{"description":"The current OpenITG version\n|since_itg|\n","type":"number"},"PLAYER_1":{"description":"Equal to ``0``\n|since_itg|\n","type":"number"},"PLAYER_2":{"description":"Equal to ``1``\n|since_itg|\n","type":"number"},"PREFSMAN":{"description":"The :lua:class:`PrefsManager` singleton\n|since_itg|\n","type":"PrefsManager"},"PROFILEMAN":{"description":"The :lua:class:`ProfileManager` singleton\n|since_itg|\n","type":"ProfileManager"},"SCREENMAN":{"description":"The :lua:class:`ScreenManager` singleton\n|since_itg|\n","type":"ScreenManager"},"SCREEN_BOTTOM":{"description":"The bottommost coordinate of the window - equal to :lua:attr:`global.SCREEN_HEIGHT`\n|since_itg|\n","type":"number"},"SCREEN_CENTER_X":{"description":"The middle X coordinate of the window\nEqual to ``SCREEN_WIDTH / 2``\n\n|since_itg|\n","type":"number"},"SCREEN_CENTER_Y":{"description":"The middle Y coordinate of the window\nEqual to ``SCREEN_HEIGHT / 2``\n\n|since_itg|\n","type":"number"},"SCREEN_HEIGHT":{"description":"The window height, scaled\nThis is set by the theme - typically ``480``\n\nIf you want the height of the game window, see :lua:meth:`RageDisplay.GetWindowHeight`.\n\n|since_itg|\n","type":"number"},"SCREEN_LEFT":{"description":"The leftmost coordinate of the window - always zero\n|since_itg|\n","type":"number"},"SCREEN_RIGHT":{"description":"The rightmost coordinate of the window - equal to :lua:attr:`global.SCREEN_WIDTH`\n|since_itg|\n","type":"number"},"SCREEN_TOP":{"description":"The topmost coordinate of the window - always zero\n|since_itg|\n","type":"number"},"SCREEN_WIDTH":{"description":"The window width, scaled\nThis is set by the theme - typically ``640`` with a 4:3 aspect ratio\n\nIf you want the width of the game window, see :lua:meth:`RageDisplay.GetWindowWidth`.\n\n|since_itg|\n","type":"number"},"SONGMAN":{"description":"The :lua:class:`SongManager` singleton\n|since_itg|\n","type":"SongManager"},"SOUND":{"description":"The :lua:class:`GameSoundManager` singleton\n|since_itg|\n","type":"GameSoundManager"},"STATSMAN":{"description":"The :lua:class:`StatsManager` singleton\n|since_itg|\n","type":"StatsManager"},"THEME":{"description":"The :lua:class:`ThemeManager` singleton\n|since_itg|\n","type":"ThemeManager"},"UNLOCKMAN":{"description":"The :lua:class:`UnlockManager` singleton\n|since_itg|\n","type":"UnlockManager"}}}}