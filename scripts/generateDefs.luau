local fs = require("@lune/fs")
local net = require("@lune/net")

require("api/makeApi")
local jsonData = net.jsonDecode(fs.readFile("scripts/api/nITG-API.json"))
local externalApi = require("api/externalApi")

local output = [[
-- This file was @generated by a script.
--> lune run scripts/generateDefs
]]

local function toLuauType(arg, useOtherVoid): string
	if arg == "int" or arg == "float" then
		arg = "number"
	elseif arg == "bool" then
		arg = "boolean"
	elseif arg == "array" then
		arg = "{ any }"
	elseif arg == "table" then
		arg = "{ [any]: any }"
	elseif arg == "void" or arg == "" or arg == " " then
		arg = if useOtherVoid then "nil" else "()"
	elseif arg == "function" then
		arg = "(...any) -> (...any)"
	elseif arg == "multiple" then
		arg = "...any"
	elseif arg == "The" or arg == "sync" then -- unknown args (wtf is "The")
		arg = "any"
	end

	return arg or "()"
end

local function stringifyMethod(methodName, methodData, class): string
	if typeof(methodData) ~= "table" then return "" end

	local args = ""
	if methodData.args then
		for _, argData in methodData.args do
			local argName = argData.name
			local type = ""
			for i, argType in argData.type do
				type ..= `{if i > 1 then " | " else ""}{toLuauType(argType)}`
			end
			args ..= ` {argName}: {type},`
		end
	end

	local returns = ""
	if methodData.returns then
		for i, returnType in methodData.returns do
			returns ..= `{if i > 1 then " | " else ""}{toLuauType(returnType, i > 1)}`
		end
	end

	returns = toLuauType(returns)
	returns = if returns:find(",") then `({returns})` else returns
	return `function {methodName}({if class then `self{if args:len() > 2 then ", " else ""}` else ""}{args:sub(2, -2)}): {returns}`
end

local constants = "\n\n--> CONSTANTS"
local classes = "\n\n--> CLASSES"

do --> Globals
	for constantType, constant in jsonData.global do
		if constantType == "vars" then
			for varName, value in constant do
				constants ..= `\ndeclare {varName}: {value.type}`
			end
		end

		if constantType == "funcs" then
			for funcName, func in constant do
				constants ..= `\ndeclare {stringifyMethod(funcName, func)}`
			end
		end
	end
end

do --> Classes
	local normal = "" -- base class
	local extending = "" -- classes that extend classes
	local extendingAnother = "" -- classes that extend extended classes
	for className, classData in jsonData.classes do
		local thisOutput = ""
		local inherits = classData.inherits
		thisOutput ..= `\ndeclare class {className}{if inherits then ` extends {inherits}` else ""}`
		for method, methodData in classData do
			if typeof(methodData) ~= "table" then continue end
			thisOutput ..= `\n\t{stringifyMethod(method, methodData, className)}`
		end

		thisOutput ..= `\nend`
		if inherits and jsonData.classes[inherits].inherits then
			extendingAnother ..= thisOutput
		elseif inherits then
			extending ..= thisOutput
		else
			normal ..= thisOutput
		end
	end

	classes ..= normal .. extending .. extendingAnother
end

--> Get other api data
local externalApiConstants = "\n\n--> EXTERNAL API"
for _, declaration in externalApi do
	externalApiConstants ..= `\n{declaration}`
end

local xmlDir = "lua/layout.xml"
local xmlData = "\n\n--> XML DATA"
if fs.isFile(xmlDir) then
	xmlData ..= require("api/getXML")(xmlDir)
end

--> Export
fs.writeFile("scripts/_nITG-defs.d.luau", output .. classes .. constants .. externalApiConstants .. xmlData)
